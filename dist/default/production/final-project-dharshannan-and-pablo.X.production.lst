

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Feb 27 16:35:30 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    12                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    13                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22   000000                     
    23                           ; Generated 06/04/2022 GMT
    24                           ; 
    25                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F67K40 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57   000000                     _T0CON0bits	set	4053
    58   000000                     _T0CON1bits	set	4054
    59   000000                     _RC4STAbits	set	3815
    60   000000                     _SP4BRGH	set	3814
    61   000000                     _SP4BRGL	set	3813
    62   000000                     _TX4STAbits	set	3816
    63   000000                     _BAUD4CONbits	set	3817
    64   000000                     _TX4REG	set	3812
    65   000000                     _LATHbits	set	3968
    66   000000                     _TRISEbits	set	3973
    67   000000                     _TRISFbits	set	3974
    68   000000                     _TRISGbits	set	3975
    69   000000                     _SSP2CON2bits	set	3802
    70   000000                     _RX4PPS	set	3605
    71   000000                     _SSP2CLKPPS	set	3612
    72   000000                     _SSP2DATPPS	set	3613
    73   000000                     _ANSELDbits	set	3751
    74   000000                     _SSP2ADD	set	3798
    75   000000                     _SSP2CON1bits	set	3801
    76   000000                     _RC4REG	set	3811
    77   000000                     _LATAbits	set	3961
    78   000000                     _LATGbits	set	3967
    79   000000                     _TRISAbits	set	3969
    80   000000                     _SSP2CON2	set	3802
    81   000000                     _TRISDbits	set	3972
    82   000000                     _CCPR4H	set	3873
    83   000000                     _CCPR3H	set	3877
    84   000000                     _SSP2STAT	set	3800
    85   000000                     _SSP2BUF	set	3797
    86   000000                     _IPR0bits	set	3615
    87   000000                     _PIE0bits	set	3625
    88   000000                     _RC7PPS	set	3689
    89   000000                     _RD5PPS	set	3695
    90   000000                     _RE2PPS	set	3700
    91   000000                     _RD6PPS	set	3696
    92   000000                     _T2PR	set	4028
    93   000000                     _T2CONbits	set	4029
    94   000000                     _CCPR2H	set	4006
    95   000000                     _CCPR1H	set	4010
    96   000000                     _TRISCbits	set	3971
    97   000000                     _LATCbits	set	3963
    98   000000                     _LATEbits	set	3965
    99   000000                     _LATFbits	set	3966
   100   000000                     _RE4PPS	set	3702
   101   000000                     _RG6PPS	set	3720
   102   000000                     _TMR0L	set	4051
   103   000000                     _TMR0H	set	4052
   104   000000                     _INTCONbits	set	4082
   105   000000                     _T2CLKCONbits	set	4031
   106   000000                     _T2HLTbits	set	4030
   107   000000                     _CCP1CONbits	set	4011
   108   000000                     _CCPTMRS0bits	set	4013
   109   000000                     _CCP2CONbits	set	4007
   110   000000                     _CCP3CONbits	set	3878
   111   000000                     _CCP4CONbits	set	3874
   112   000000                     _PIE4bits	set	3629
   113   000000                     _PIR0bits	set	3635
   114   000000                     _PIR4bits	set	3639
   115   000000                     _RC0PPS	set	3682
   116                           
   117                           ; #config settings
   118                           
   119                           	psect	cinit
   120   000216                     __pcinit:
   121                           	callstack 0
   122   000216                     start_initialization:
   123                           	callstack 0
   124   000216                     __initialization:
   125                           	callstack 0
   126                           
   127                           ; Clear objects allocated to BANK0 (60 bytes)
   128   000216  EE00  F060         	lfsr	0,__pbssBANK0
   129   00021A  0E3C               	movlw	60
   130   00021C                     clear_0:
   131   00021C  6AEE               	clrf	postinc0,c
   132   00021E  06E8               	decf	wreg,f,c
   133   000220  E1FD               	bnz	clear_0
   134                           
   135                           ; Clear objects allocated to COMRAM (25 bytes)
   136   000222  EE00  F01E         	lfsr	0,__pbssCOMRAM
   137   000226  0E19               	movlw	25
   138   000228                     clear_1:
   139   000228  6AEE               	clrf	postinc0,c
   140   00022A  06E8               	decf	wreg,f,c
   141   00022C  E1FD               	bnz	clear_1
   142   00022E                     end_of_initialization:
   143                           	callstack 0
   144   00022E                     __end_of__initialization:
   145                           	callstack 0
   146   00022E  9037               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   147   000230  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   148   000232  0100               	movlb	0
   149   000234  EFB6  F000         	goto	_main	;jump to C main() function
   150                           
   151                           	psect	bssCOMRAM
   152   00001E                     __pbssCOMRAM:
   153                           	callstack 0
   154   00001E                     _EUSART4RXbuf:
   155                           	callstack 0
   156   00001E                     	ds	20
   157   000032                     _tmr_ovf:
   158                           	callstack 0
   159   000032                     	ds	1
   160   000033                     _TxBufReadCnt:
   161                           	callstack 0
   162   000033                     	ds	1
   163   000034                     _TxBufWriteCnt:
   164                           	callstack 0
   165   000034                     	ds	1
   166   000035                     _RxBufReadCnt:
   167                           	callstack 0
   168   000035                     	ds	1
   169   000036                     _RxBufWriteCnt:
   170                           	callstack 0
   171   000036                     	ds	1
   172                           
   173                           	psect	bssBANK0
   174   000060                     __pbssBANK0:
   175                           	callstack 0
   176   000060                     _EUSART4TXbuf:
   177                           	callstack 0
   178   000060                     	ds	60
   179                           
   180                           	psect	cstackCOMRAM
   181   000001                     __pcstackCOMRAM:
   182                           	callstack 0
   183   000001                     ??_getCharFromTxBuf:
   184   000001                     putCharToRxBuf@byte:
   185                           	callstack 0
   186                           
   187                           ; 1 bytes @ 0x0
   188   000001                     	ds	2
   189   000003                     ??_HighISR:
   190                           
   191                           ; 1 bytes @ 0x2
   192   000003                     	ds	2
   193   000005                     HighISR@a:
   194                           	callstack 0
   195                           
   196                           ; 1 bytes @ 0x4
   197   000005                     	ds	1
   198   000006                     ??_LowISR:
   199                           
   200                           ; 1 bytes @ 0x5
   201   000006                     	ds	4
   202   00000A                     initDCmotorsPWM@PWMperiod:
   203                           	callstack 0
   204                           
   205                           ; 2 bytes @ 0x9
   206   00000A                     	ds	2
   207   00000C                     main@motorL:
   208                           	callstack 0
   209                           
   210                           ; 9 bytes @ 0xB
   211   00000C                     	ds	9
   212   000015                     main@motorR:
   213                           	callstack 0
   214                           
   215                           ; 9 bytes @ 0x14
   216   000015                     	ds	9
   217                           
   218 ;;
   219 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   220 ;;
   221 ;; *************** function _main *****************
   222 ;; Defined at:
   223 ;;		line 14 in file "main_motor.c"
   224 ;; Parameters:    Size  Location     Type
   225 ;;		None
   226 ;; Auto vars:     Size  Location     Type
   227 ;;  motorR          9   20[COMRAM] struct DC_motor
   228 ;;  motorL          9   11[COMRAM] struct DC_motor
   229 ;; Return value:  Size  Location     Type
   230 ;;                  1    wreg      void 
   231 ;; Registers used:
   232 ;;		wreg, status,2, status,0, cstack
   233 ;; Tracked objects:
   234 ;;		On entry : 0/0
   235 ;;		On exit  : 0/0
   236 ;;		Unchanged: 0/0
   237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   239 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   241 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   242 ;;Total ram usage:       18 bytes
   243 ;; Hardware stack levels required when called: 4
   244 ;; This function calls:
   245 ;;		_initDCmotorsPWM
   246 ;; This function is called by:
   247 ;;		Startup code after reset
   248 ;; This function uses a non-reentrant model
   249 ;;
   250                           
   251                           	psect	text0
   252   00016C                     __ptext0:
   253                           	callstack 0
   254   00016C                     _main:
   255                           	callstack 27
   256   00016C                     
   257                           ;main_motor.c: 16:     initDCmotorsPWM(99);
   258   00016C  0E00               	movlw	0
   259   00016E  6E0B               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   260   000170  0E63               	movlw	99
   261   000172  6E0A               	movwf	initDCmotorsPWM@PWMperiod^0,c
   262   000174  EC3F  F000         	call	_initDCmotorsPWM	;wreg free
   263   000178                     
   264                           ;main_motor.c: 18:     struct DC_motor motorL, motorR;;main_motor.c: 20:     motorL.powe
      +                          r=0;
   265   000178  0E00               	movlw	0
   266   00017A  6E0C               	movwf	main@motorL^0,c
   267   00017C                     
   268                           ;main_motor.c: 21:     motorL.direction=1;
   269   00017C  0E01               	movlw	1
   270   00017E  6E0D               	movwf	(main@motorL+1)^0,c
   271   000180                     
   272                           ;main_motor.c: 22:     motorL.brakemode=1;
   273   000180  0E01               	movlw	1
   274   000182  6E0E               	movwf	(main@motorL+2)^0,c
   275   000184                     
   276                           ;main_motor.c: 23:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   277   000184  0EAA               	movlw	170
   278   000186  6E11               	movwf	(main@motorL+5)^0,c
   279   000188  0E0F               	movlw	15
   280   00018A  6E12               	movwf	(main@motorL+6)^0,c
   281   00018C                     
   282                           ;main_motor.c: 24:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   283   00018C  0EA6               	movlw	166
   284   00018E  6E13               	movwf	(main@motorL+7)^0,c
   285   000190  0E0F               	movlw	15
   286   000192  6E14               	movwf	(main@motorL+8)^0,c
   287   000194                     
   288                           ;main_motor.c: 25:     motorL.PWMperiod= T2PR;
   289   000194  CFBC F00F          	movff	4028,main@motorL+3	;volatile
   290   000198  6A10               	clrf	(main@motorL+4)^0,c
   291   00019A                     
   292                           ;main_motor.c: 27:     motorR.power=0;
   293   00019A  0E00               	movlw	0
   294   00019C  6E15               	movwf	main@motorR^0,c
   295   00019E                     
   296                           ;main_motor.c: 28:     motorR.direction=1;
   297   00019E  0E01               	movlw	1
   298   0001A0  6E16               	movwf	(main@motorR+1)^0,c
   299   0001A2                     
   300                           ;main_motor.c: 29:     motorR.brakemode=1;
   301   0001A2  0E01               	movlw	1
   302   0001A4  6E17               	movwf	(main@motorR+2)^0,c
   303   0001A6                     
   304                           ;main_motor.c: 30:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   305   0001A6  0E25               	movlw	37
   306   0001A8  6E1A               	movwf	(main@motorR+5)^0,c
   307   0001AA  0E0F               	movlw	15
   308   0001AC  6E1B               	movwf	(main@motorR+6)^0,c
   309   0001AE                     
   310                           ;main_motor.c: 31:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   311   0001AE  0E21               	movlw	33
   312   0001B0  6E1C               	movwf	(main@motorR+7)^0,c
   313   0001B2  0E0F               	movlw	15
   314   0001B4  6E1D               	movwf	(main@motorR+8)^0,c
   315   0001B6                     
   316                           ;main_motor.c: 32:     motorR.PWMperiod= T2PR;
   317   0001B6  CFBC F018          	movff	4028,main@motorR+3	;volatile
   318   0001BA  6A19               	clrf	(main@motorR+4)^0,c
   319   0001BC  EF3D  F000         	goto	start
   320   0001C0                     __end_of_main:
   321                           	callstack 0
   322                           
   323 ;; *************** function _initDCmotorsPWM *****************
   324 ;; Defined at:
   325 ;;		line 5 in file "dc_motor.c"
   326 ;; Parameters:    Size  Location     Type
   327 ;;  PWMperiod       2    9[COMRAM] unsigned int 
   328 ;; Auto vars:     Size  Location     Type
   329 ;;		None
   330 ;; Return value:  Size  Location     Type
   331 ;;                  1    wreg      void 
   332 ;; Registers used:
   333 ;;		wreg, status,2
   334 ;; Tracked objects:
   335 ;;		On entry : 0/0
   336 ;;		On exit  : 0/0
   337 ;;		Unchanged: 0/0
   338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   339 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   342 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   343 ;;Total ram usage:        2 bytes
   344 ;; Hardware stack levels used: 1
   345 ;; Hardware stack levels required when called: 3
   346 ;; This function calls:
   347 ;;		Nothing
   348 ;; This function is called by:
   349 ;;		_main
   350 ;; This function uses a non-reentrant model
   351 ;;
   352                           
   353                           	psect	text1
   354   00007E                     __ptext1:
   355                           	callstack 0
   356   00007E                     _initDCmotorsPWM:
   357                           	callstack 27
   358   00007E                     
   359                           ;dc_motor.c: 7:     LATEbits.LATE2 = 0;
   360   00007E  947D               	bcf	125,2,c	;volatile
   361                           
   362                           ;dc_motor.c: 8:     TRISEbits.TRISE2 = 0;
   363   000080  9485               	bcf	133,2,c	;volatile
   364                           
   365                           ;dc_motor.c: 9:     LATEbits.LATE4 = 0;
   366   000082  987D               	bcf	125,4,c	;volatile
   367                           
   368                           ;dc_motor.c: 10:     TRISEbits.TRISE4 = 0;
   369   000084  9885               	bcf	133,4,c	;volatile
   370                           
   371                           ;dc_motor.c: 11:     LATCbits.LATC7 = 0;
   372   000086  9E7B               	bcf	123,7,c	;volatile
   373                           
   374                           ;dc_motor.c: 12:     TRISCbits.TRISC7 = 0;
   375   000088  9E83               	bcf	131,7,c	;volatile
   376                           
   377                           ;dc_motor.c: 13:     LATGbits.LATG6 = 0;
   378   00008A  9C7F               	bcf	127,6,c	;volatile
   379                           
   380                           ;dc_motor.c: 14:     TRISGbits.TRISG6 = 0;
   381   00008C  9C87               	bcf	135,6,c	;volatile
   382   00008E                     
   383                           ;dc_motor.c: 17:     RE2PPS=0x05;
   384   00008E  0E05               	movlw	5
   385   000090  010E               	movlb	14	; () banked
   386   000092  6F74               	movwf	116,b	;volatile
   387                           
   388                           ;dc_motor.c: 18:     RE4PPS=0x06;
   389   000094  0E06               	movlw	6
   390   000096  6F76               	movwf	118,b	;volatile
   391                           
   392                           ;dc_motor.c: 19:     RC7PPS=0x07;
   393   000098  0E07               	movlw	7
   394   00009A  6F69               	movwf	105,b	;volatile
   395                           
   396                           ;dc_motor.c: 20:     RG6PPS=0x08;
   397   00009C  0E08               	movlw	8
   398   00009E  6F88               	movwf	136,b	;volatile
   399                           
   400                           ;dc_motor.c: 23:     T2CONbits.CKPS=0b100;
   401   0000A0  50BD               	movf	189,w,c	;volatile
   402   0000A2  0B8F               	andlw	-113
   403   0000A4  0940               	iorlw	64
   404   0000A6  6EBD               	movwf	189,c	;volatile
   405                           
   406                           ;dc_motor.c: 24:     T2HLTbits.MODE=0b00000;
   407   0000A8  0EE0               	movlw	-32
   408   0000AA  16BE               	andwf	190,f,c	;volatile
   409                           
   410                           ;dc_motor.c: 25:     T2CLKCONbits.CS=0b0001;
   411   0000AC  50BF               	movf	191,w,c	;volatile
   412   0000AE  0BF0               	andlw	-16
   413   0000B0  0901               	iorlw	1
   414   0000B2  6EBF               	movwf	191,c	;volatile
   415   0000B4                     
   416                           ; BSR set to: 14
   417                           ;dc_motor.c: 29:     T2PR=PWMperiod;
   418   0000B4  C00A  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   419   0000B8                     
   420                           ; BSR set to: 14
   421                           ;dc_motor.c: 30:     T2CONbits.ON=1;
   422   0000B8  8EBD               	bsf	189,7,c	;volatile
   423                           
   424                           ;dc_motor.c: 34:     CCPR1H=0;
   425   0000BA  0E00               	movlw	0
   426   0000BC  6EAA               	movwf	170,c	;volatile
   427                           
   428                           ;dc_motor.c: 35:     CCPR2H=0;
   429   0000BE  0E00               	movlw	0
   430   0000C0  6EA6               	movwf	166,c	;volatile
   431                           
   432                           ;dc_motor.c: 36:     CCPR3H=0;
   433   0000C2  0E00               	movlw	0
   434   0000C4  010F               	movlb	15	; () banked
   435   0000C6  6F25               	movwf	37,b	;volatile
   436                           
   437                           ;dc_motor.c: 37:     CCPR4H=0;
   438   0000C8  0E00               	movlw	0
   439   0000CA  6F21               	movwf	33,b	;volatile
   440                           
   441                           ;dc_motor.c: 40:     CCPTMRS0bits.C1TSEL=0;
   442   0000CC  0EFC               	movlw	-4
   443   0000CE  16AD               	andwf	173,f,c	;volatile
   444                           
   445                           ;dc_motor.c: 41:     CCPTMRS0bits.C2TSEL=0;
   446   0000D0  0EF3               	movlw	-13
   447   0000D2  16AD               	andwf	173,f,c	;volatile
   448                           
   449                           ;dc_motor.c: 42:     CCPTMRS0bits.C3TSEL=0;
   450   0000D4  0ECF               	movlw	-49
   451   0000D6  16AD               	andwf	173,f,c	;volatile
   452                           
   453                           ;dc_motor.c: 43:     CCPTMRS0bits.C4TSEL=0;
   454   0000D8  0E3F               	movlw	-193
   455   0000DA  16AD               	andwf	173,f,c	;volatile
   456   0000DC                     
   457                           ; BSR set to: 15
   458                           ;dc_motor.c: 46:     CCP1CONbits.FMT=1;
   459   0000DC  88AB               	bsf	171,4,c	;volatile
   460                           
   461                           ;dc_motor.c: 47:     CCP1CONbits.CCP1MODE=0b1100;
   462   0000DE  50AB               	movf	171,w,c	;volatile
   463   0000E0  0BF0               	andlw	-16
   464   0000E2  090C               	iorlw	12
   465   0000E4  6EAB               	movwf	171,c	;volatile
   466   0000E6                     
   467                           ; BSR set to: 15
   468                           ;dc_motor.c: 48:     CCP1CONbits.EN=1;
   469   0000E6  8EAB               	bsf	171,7,c	;volatile
   470   0000E8                     
   471                           ; BSR set to: 15
   472                           ;dc_motor.c: 50:     CCP2CONbits.FMT=1;
   473   0000E8  88A7               	bsf	167,4,c	;volatile
   474                           
   475                           ;dc_motor.c: 51:     CCP2CONbits.CCP2MODE=0b1100;
   476   0000EA  50A7               	movf	167,w,c	;volatile
   477   0000EC  0BF0               	andlw	-16
   478   0000EE  090C               	iorlw	12
   479   0000F0  6EA7               	movwf	167,c	;volatile
   480   0000F2                     
   481                           ; BSR set to: 15
   482                           ;dc_motor.c: 52:     CCP2CONbits.EN=1;
   483   0000F2  8EA7               	bsf	167,7,c	;volatile
   484   0000F4                     
   485                           ; BSR set to: 15
   486                           ;dc_motor.c: 54:     CCP3CONbits.FMT=1;
   487   0000F4  8926               	bsf	38,4,b	;volatile
   488                           
   489                           ;dc_motor.c: 55:     CCP3CONbits.CCP3MODE=0b1100;
   490   0000F6  5126               	movf	38,w,b	;volatile
   491   0000F8  0BF0               	andlw	-16
   492   0000FA  090C               	iorlw	12
   493   0000FC  6F26               	movwf	38,b	;volatile
   494   0000FE                     
   495                           ; BSR set to: 15
   496                           ;dc_motor.c: 56:     CCP3CONbits.EN=1;
   497   0000FE  8F26               	bsf	38,7,b	;volatile
   498   000100                     
   499                           ; BSR set to: 15
   500                           ;dc_motor.c: 58:     CCP4CONbits.FMT=1;
   501   000100  8922               	bsf	34,4,b	;volatile
   502                           
   503                           ;dc_motor.c: 59:     CCP4CONbits.CCP4MODE=0b1100;
   504   000102  5122               	movf	34,w,b	;volatile
   505   000104  0BF0               	andlw	-16
   506   000106  090C               	iorlw	12
   507   000108  6F22               	movwf	34,b	;volatile
   508   00010A                     
   509                           ; BSR set to: 15
   510                           ;dc_motor.c: 60:     CCP4CONbits.EN=1;
   511   00010A  8F22               	bsf	34,7,b	;volatile
   512   00010C                     
   513                           ; BSR set to: 15
   514   00010C  0012               	return		;funcret
   515   00010E                     __end_of_initDCmotorsPWM:
   516                           	callstack 0
   517                           
   518 ;; *************** function _LowISR *****************
   519 ;; Defined at:
   520 ;;		line 34 in file "interrupts.c"
   521 ;; Parameters:    Size  Location     Type
   522 ;;		None
   523 ;; Auto vars:     Size  Location     Type
   524 ;;		None
   525 ;; Return value:  Size  Location     Type
   526 ;;                  1    wreg      void 
   527 ;; Registers used:
   528 ;;		wreg, status,2, status,0
   529 ;; Tracked objects:
   530 ;;		On entry : 0/0
   531 ;;		On exit  : 0/0
   532 ;;		Unchanged: 0/0
   533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   536 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   537 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   538 ;;Total ram usage:        4 bytes
   539 ;; Hardware stack levels used: 1
   540 ;; Hardware stack levels required when called: 2
   541 ;; This function calls:
   542 ;;		Nothing
   543 ;; This function is called by:
   544 ;;		Interrupt level 1
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           	psect	intcodelo
   549   000018                     __pintcodelo:
   550                           	callstack 0
   551   000018                     _LowISR:
   552                           	callstack 27
   553                           
   554                           ; BSR set to: 15
   555                           ;incstack = 0
   556   000018  8037               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
   557   00001A  CFD8 F007          	movff	status,??_LowISR+1
   558   00001E  CFE8 F008          	movff	wreg,??_LowISR+2
   559   000022  CFE0 F009          	movff	bsr,??_LowISR+3
   560   000026                     
   561                           ;interrupts.c: 37:     if(PIR0bits.TMR0IF){
   562   000026  010E               	movlb	14	; () banked
   563   000028  AB33               	btfss	51,5,b	;volatile
   564   00002A  EF19  F000         	goto	i1u35_21
   565   00002E  EF1B  F000         	goto	i1u35_20
   566   000032                     i1u35_21:
   567   000032  EF35  F000         	goto	i1l271
   568   000036                     i1u35_20:
   569   000036                     
   570                           ; BSR set to: 14
   571                           ;interrupts.c: 38:         LATHbits.LATH3 = !LATHbits.LATH3;
   572   000036  A680               	btfss	128,3,c	;volatile
   573   000038  EF20  F000         	goto	i1u36_21
   574   00003C  EF24  F000         	goto	i1u36_20
   575   000040                     i1u36_21:
   576   000040  6A06               	clrf	??_LowISR^0,c
   577   000042  2A06               	incf	??_LowISR^0,f,c
   578   000044  EF25  F000         	goto	i1u37_28
   579   000048                     i1u36_20:
   580   000048  6A06               	clrf	??_LowISR^0,c
   581   00004A                     i1u37_28:
   582   00004A  4606               	rlncf	??_LowISR^0,f,c
   583   00004C  4606               	rlncf	??_LowISR^0,f,c
   584   00004E  4606               	rlncf	??_LowISR^0,f,c
   585   000050  5080               	movf	128,w,c	;volatile
   586   000052  1806               	xorwf	??_LowISR^0,w,c
   587   000054  0BF7               	andlw	-9
   588   000056  1806               	xorwf	??_LowISR^0,w,c
   589   000058  6E80               	movwf	128,c	;volatile
   590   00005A                     
   591                           ;interrupts.c: 39:         TMR0H = 0b11000010;
   592   00005A  0EC2               	movlw	194
   593   00005C  6ED4               	movwf	212,c	;volatile
   594   00005E                     
   595                           ;interrupts.c: 40:         TMR0L = 0b11110110;
   596   00005E  0EF6               	movlw	246
   597   000060  6ED3               	movwf	211,c	;volatile
   598   000062                     
   599                           ;interrupts.c: 41:         tmr_ovf = 1;
   600   000062  0E01               	movlw	1
   601   000064  6E32               	movwf	_tmr_ovf^0,c
   602   000066                     
   603                           ;interrupts.c: 42:         PIR0bits.TMR0IF=0;
   604   000066  010E               	movlb	14	; () banked
   605   000068  9B33               	bcf	51,5,b	;volatile
   606   00006A                     i1l271:
   607                           
   608                           ; BSR set to: 14
   609   00006A  C009  FFE0         	movff	??_LowISR+3,bsr
   610   00006E  C008  FFE8         	movff	??_LowISR+2,wreg
   611   000072  C007  FFD8         	movff	??_LowISR+1,status
   612   000076  9037               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   613   000078  0010               	retfie	
   614   00007A                     __end_of_LowISR:
   615                           	callstack 0
   616                           
   617 ;; *************** function _HighISR *****************
   618 ;; Defined at:
   619 ;;		line 48 in file "interrupts.c"
   620 ;; Parameters:    Size  Location     Type
   621 ;;		None
   622 ;; Auto vars:     Size  Location     Type
   623 ;;  a               1    4[COMRAM] unsigned char 
   624 ;; Return value:  Size  Location     Type
   625 ;;                  1    wreg      void 
   626 ;; Registers used:
   627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   634 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   635 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   636 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   637 ;;Total ram usage:        3 bytes
   638 ;; Hardware stack levels used: 1
   639 ;; Hardware stack levels required when called: 1
   640 ;; This function calls:
   641 ;;		_getCharFromTxBuf
   642 ;;		_isDataInTxBuf
   643 ;;		_putCharToRxBuf
   644 ;; This function is called by:
   645 ;;		Interrupt level 2
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649                           	psect	intcode
   650   000008                     __pintcode:
   651                           	callstack 0
   652   000008                     _HighISR:
   653                           	callstack 27
   654                           
   655                           ; BSR set to: 14
   656                           ;incstack = 0
   657   000008  8237               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   658   00000A  EF87  F000         	goto	int_func
   659                           
   660                           	psect	intcode_body
   661   00010E                     __pintcode_body:
   662                           	callstack 27
   663   00010E                     int_func:
   664                           	callstack 27
   665   00010E  CFD9 F003          	movff	fsr2l,??_HighISR
   666   000112  CFDA F004          	movff	fsr2h,??_HighISR+1
   667   000116                     
   668                           ;interrupts.c: 52:     if(PIR4bits.RC4IF){
   669   000116  010E               	movlb	14	; () banked
   670   000118  A737               	btfss	55,3,b	;volatile
   671   00011A  EF91  F000         	goto	i2u48_41
   672   00011E  EF93  F000         	goto	i2u48_40
   673   000122                     i2u48_41:
   674   000122  EF98  F000         	goto	i2l1551
   675   000126                     i2u48_40:
   676   000126                     
   677                           ; BSR set to: 14
   678                           ;interrupts.c: 53:         unsigned char a = RC4REG;
   679   000126  CEE3 F005          	movff	3811,HighISR@a	;volatile
   680   00012A                     
   681                           ; BSR set to: 14
   682                           ;interrupts.c: 54:         putCharToRxBuf(a);
   683   00012A  5005               	movf	HighISR@a^0,w,c
   684   00012C  ECF6  F000         	call	_putCharToRxBuf
   685   000130                     i2l1551:
   686                           
   687                           ;interrupts.c: 58:     if(!isDataInTxBuf()){
   688   000130  EC1C  F001         	call	_isDataInTxBuf	;wreg free
   689   000134  0900               	iorlw	0
   690   000136  A4D8               	btfss	status,2,c
   691   000138  EFA0  F000         	goto	i2u49_41
   692   00013C  EFA2  F000         	goto	i2u49_40
   693   000140                     i2u49_41:
   694   000140  EFA4  F000         	goto	i2l277
   695   000144                     i2u49_40:
   696   000144                     
   697                           ;interrupts.c: 59:         PIE4bits.TX4IE=0;
   698   000144  010E               	movlb	14	; () banked
   699   000146  952D               	bcf	45,2,b	;volatile
   700   000148                     i2l277:
   701                           
   702                           ;interrupts.c: 61:     if(PIR4bits.TX4IF){
   703   000148  010E               	movlb	14	; () banked
   704   00014A  A537               	btfss	55,2,b	;volatile
   705   00014C  EFAA  F000         	goto	i2u50_41
   706   000150  EFAC  F000         	goto	i2u50_40
   707   000154                     i2u50_41:
   708   000154  EFB0  F000         	goto	i2l279
   709   000158                     i2u50_40:
   710   000158                     
   711                           ; BSR set to: 14
   712                           ;interrupts.c: 62:         TX4REG = getCharFromTxBuf();
   713   000158  ECE0  F000         	call	_getCharFromTxBuf	;wreg free
   714   00015C  010E               	movlb	14	; () banked
   715   00015E  6FE4               	movwf	228,b	;volatile
   716   000160                     i2l279:
   717                           
   718                           ; BSR set to: 14
   719   000160  C004  FFDA         	movff	??_HighISR+1,fsr2h
   720   000164  C003  FFD9         	movff	??_HighISR,fsr2l
   721   000168  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   722   00016A  0011               	retfie		f
   723   00016C                     __end_of_HighISR:
   724                           	callstack 0
   725                           
   726 ;; *************** function _putCharToRxBuf *****************
   727 ;; Defined at:
   728 ;;		line 54 in file "serial.c"
   729 ;; Parameters:    Size  Location     Type
   730 ;;  byte            1    wreg     unsigned char 
   731 ;; Auto vars:     Size  Location     Type
   732 ;;  byte            1    0[COMRAM] unsigned char 
   733 ;; Return value:  Size  Location     Type
   734 ;;                  1    wreg      void 
   735 ;; Registers used:
   736 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   737 ;; Tracked objects:
   738 ;;		On entry : 0/0
   739 ;;		On exit  : 0/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   743 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   745 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   746 ;;Total ram usage:        1 bytes
   747 ;; Hardware stack levels used: 1
   748 ;; This function calls:
   749 ;;		Nothing
   750 ;; This function is called by:
   751 ;;		_HighISR
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text4
   756   0001EC                     __ptext4:
   757                           	callstack 0
   758   0001EC                     _putCharToRxBuf:
   759                           	callstack 27
   760                           
   761                           ; BSR set to: 14
   762                           ;incstack = 0
   763                           ;putCharToRxBuf@byte stored from wreg
   764   0001EC  6E01               	movwf	putCharToRxBuf@byte^0,c
   765   0001EE                     
   766                           ;serial.c: 55:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
   767   0001EE  0E13               	movlw	19
   768   0001F0  6436               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
   769   0001F2  EFFD  F000         	goto	i2u21_41
   770   0001F6  EFFF  F000         	goto	i2u21_40
   771   0001FA                     i2u21_41:
   772   0001FA  EF01  F001         	goto	i2l1247
   773   0001FE                     i2u21_40:
   774   0001FE  0E00               	movlw	0
   775   000200  6E36               	movwf	_RxBufWriteCnt^0,c	;volatile
   776   000202                     i2l1247:
   777                           
   778                           ;serial.c: 56:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
   779   000202  0E1E               	movlw	low _EUSART4RXbuf
   780   000204  2436               	addwf	_RxBufWriteCnt^0,w,c	;volatile
   781   000206  6ED9               	movwf	fsr2l,c
   782   000208  6ADA               	clrf	fsr2h,c
   783   00020A  0E00               	movlw	high _EUSART4RXbuf
   784   00020C  22DA               	addwfc	fsr2h,f,c
   785   00020E  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
   786   000212  2A36               	incf	_RxBufWriteCnt^0,f,c	;volatile
   787   000214  0012               	return		;funcret
   788   000216                     __end_of_putCharToRxBuf:
   789                           	callstack 0
   790                           
   791 ;; *************** function _isDataInTxBuf *****************
   792 ;; Defined at:
   793 ;;		line 82 in file "serial.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      unsigned char 
   800 ;; Registers used:
   801 ;;		wreg, status,2, status,0
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   811 ;;Total ram usage:        0 bytes
   812 ;; Hardware stack levels used: 1
   813 ;; This function calls:
   814 ;;		Nothing
   815 ;; This function is called by:
   816 ;;		_HighISR
   817 ;;		_sendTxBuf
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text5
   822   000238                     __ptext5:
   823                           	callstack 0
   824   000238                     _isDataInTxBuf:
   825                           	callstack 27
   826   000238                     
   827                           ;serial.c: 83:     return (TxBufWriteCnt!=TxBufReadCnt);
   828   000238  5033               	movf	_TxBufReadCnt^0,w,c	;volatile
   829   00023A  1834               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
   830   00023C  A4D8               	btfss	status,2,c
   831   00023E  EF23  F001         	goto	i2u22_41
   832   000242  EF26  F001         	goto	i2u22_40
   833   000246                     i2u22_41:
   834   000246  0E01               	movlw	1
   835   000248  EF27  F001         	goto	i2u23_40
   836   00024C                     i2u22_40:
   837   00024C  0E00               	movlw	0
   838   00024E                     i2u23_40:
   839   00024E  0012               	return		;funcret
   840   000250                     __end_of_isDataInTxBuf:
   841                           	callstack 0
   842                           
   843 ;; *************** function _getCharFromTxBuf *****************
   844 ;; Defined at:
   845 ;;		line 68 in file "serial.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;		None
   848 ;; Auto vars:     Size  Location     Type
   849 ;;		None
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      unsigned char 
   852 ;; Registers used:
   853 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   861 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   862 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   863 ;;Total ram usage:        2 bytes
   864 ;; Hardware stack levels used: 1
   865 ;; This function calls:
   866 ;;		Nothing
   867 ;; This function is called by:
   868 ;;		_HighISR
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           	psect	text6
   873   0001C0                     __ptext6:
   874                           	callstack 0
   875   0001C0                     _getCharFromTxBuf:
   876                           	callstack 27
   877   0001C0                     
   878                           ;serial.c: 69:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
   879   0001C0  0E3B               	movlw	59
   880   0001C2  6433               	cpfsgt	_TxBufReadCnt^0,c	;volatile
   881   0001C4  EFE6  F000         	goto	i2u46_41
   882   0001C8  EFE8  F000         	goto	i2u46_40
   883   0001CC                     i2u46_41:
   884   0001CC  EFEA  F000         	goto	i2l1533
   885   0001D0                     i2u46_40:
   886   0001D0  0E00               	movlw	0
   887   0001D2  6E33               	movwf	_TxBufReadCnt^0,c	;volatile
   888   0001D4                     i2l1533:
   889                           
   890                           ;serial.c: 70:     return EUSART4TXbuf[TxBufReadCnt++];
   891   0001D4  2A33               	incf	_TxBufReadCnt^0,f,c	;volatile
   892   0001D6  0433               	decf	_TxBufReadCnt^0,w,c	;volatile
   893   0001D8  6E01               	movwf	??_getCharFromTxBuf^0,c
   894   0001DA  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
   895   0001DC  0E60               	movlw	low _EUSART4TXbuf
   896   0001DE  2401               	addwf	??_getCharFromTxBuf^0,w,c
   897   0001E0  6ED9               	movwf	fsr2l,c
   898   0001E2  0E00               	movlw	high _EUSART4TXbuf
   899   0001E4  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
   900   0001E6  6EDA               	movwf	fsr2h,c
   901   0001E8  50DF               	movf	indf2,w,c
   902   0001EA  0012               	return		;funcret
   903   0001EC                     __end_of_getCharFromTxBuf:
   904                           	callstack 0
   905   000000                     
   906                           	psect	rparam
   907   000000                     
   908                           	psect	temp
   909   000037                     btemp:
   910                           	callstack 0
   911   000037                     	ds	1
   912   000000                     int$flags	set	btemp
   913   000000                     wtemp8	set	btemp+1
   914   000000                     ttemp5	set	btemp+1
   915   000000                     ttemp6	set	btemp+4
   916   000000                     ttemp7	set	btemp+8
   917                           
   918                           	psect	idloc
   919                           
   920                           ;Config register IDLOC0 @ 0x200000
   921                           ;	unspecified, using default values
   922   200000                     	org	2097152
   923   200000  0FFF               	dw	4095
   924                           
   925                           ;Config register IDLOC1 @ 0x200002
   926                           ;	unspecified, using default values
   927   200002                     	org	2097154
   928   200002  0FFF               	dw	4095
   929                           
   930                           ;Config register IDLOC2 @ 0x200004
   931                           ;	unspecified, using default values
   932   200004                     	org	2097156
   933   200004  0FFF               	dw	4095
   934                           
   935                           ;Config register IDLOC3 @ 0x200006
   936                           ;	unspecified, using default values
   937   200006                     	org	2097158
   938   200006  0FFF               	dw	4095
   939                           
   940                           ;Config register IDLOC4 @ 0x200008
   941                           ;	unspecified, using default values
   942   200008                     	org	2097160
   943   200008  0FFF               	dw	4095
   944                           
   945                           ;Config register IDLOC5 @ 0x20000A
   946                           ;	unspecified, using default values
   947   20000A                     	org	2097162
   948   20000A  0FFF               	dw	4095
   949                           
   950                           ;Config register IDLOC6 @ 0x20000C
   951                           ;	unspecified, using default values
   952   20000C                     	org	2097164
   953   20000C  0FFF               	dw	4095
   954                           
   955                           ;Config register IDLOC7 @ 0x20000E
   956                           ;	unspecified, using default values
   957   20000E                     	org	2097166
   958   20000E  0FFF               	dw	4095
   959                           
   960                           	psect	config
   961                           
   962                           ;Config register CONFIG1L @ 0x300000
   963                           ;	External Oscillator mode Selection bits
   964                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
   965                           ;	Power-up default value for COSC bits
   966                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
   967   300000                     	org	3145728
   968   300000  AA                 	db	170
   969                           
   970                           ;Config register CONFIG1H @ 0x300001
   971                           ;	unspecified, using default values
   972                           ;	Clock Out Enable bit
   973                           ;	CLKOUTEN = 0x1, unprogrammed default
   974                           ;	Clock Switch Enable bit
   975                           ;	CSWEN = 0x1, unprogrammed default
   976                           ;	Fail-Safe Clock Monitor Enable bit
   977                           ;	FCMEN = 0x1, unprogrammed default
   978   300001                     	org	3145729
   979   300001  FF                 	db	255
   980                           
   981                           ;Config register CONFIG2L @ 0x300002
   982                           ;	unspecified, using default values
   983                           ;	Master Clear Enable bit
   984                           ;	MCLRE = 0x1, unprogrammed default
   985                           ;	Power-up Timer Enable bit
   986                           ;	PWRTE = 0x1, unprogrammed default
   987                           ;	Low-power BOR enable bit
   988                           ;	LPBOREN = 0x1, unprogrammed default
   989                           ;	Brown-out Reset Enable bits
   990                           ;	BOREN = 0x3, unprogrammed default
   991   300002                     	org	3145730
   992   300002  FF                 	db	255
   993                           
   994                           ;Config register CONFIG2H @ 0x300003
   995                           ;	unspecified, using default values
   996                           ;	Brown Out Reset Voltage selection bits
   997                           ;	BORV = 0x3, unprogrammed default
   998                           ;	ZCD Disable bit
   999                           ;	ZCD = 0x1, unprogrammed default
  1000                           ;	PPSLOCK bit One-Way Set Enable bit
  1001                           ;	PPS1WAY = 0x1, unprogrammed default
  1002                           ;	Stack Full/Underflow Reset Enable bit
  1003                           ;	STVREN = 0x1, unprogrammed default
  1004                           ;	Debugger Enable bit
  1005                           ;	DEBUG = 0x1, unprogrammed default
  1006                           ;	Extended Instruction Set Enable bit
  1007                           ;	XINST = 0x1, unprogrammed default
  1008   300003                     	org	3145731
  1009   300003  FF                 	db	255
  1010                           
  1011                           ;Config register CONFIG3L @ 0x300004
  1012                           ;	WDT Period Select bits
  1013                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  1014                           ;	WDT operating mode
  1015                           ;	WDTE = OFF, WDT Disabled
  1016   300004                     	org	3145732
  1017   300004  9F                 	db	159
  1018                           
  1019                           ;Config register CONFIG3H @ 0x300005
  1020                           ;	unspecified, using default values
  1021                           ;	WDT Window Select bits
  1022                           ;	WDTCWS = 0x7, unprogrammed default
  1023                           ;	WDT input clock selector
  1024                           ;	WDTCCS = 0x7, unprogrammed default
  1025   300005                     	org	3145733
  1026   300005  FF                 	db	255
  1027                           
  1028                           ;Config register CONFIG4L @ 0x300006
  1029                           ;	unspecified, using default values
  1030                           ;	Write Protection Block 0
  1031                           ;	WRT0 = 0x1, unprogrammed default
  1032                           ;	Write Protection Block 1
  1033                           ;	WRT1 = 0x1, unprogrammed default
  1034                           ;	Write Protection Block 2
  1035                           ;	WRT2 = 0x1, unprogrammed default
  1036                           ;	Write Protection Block 3
  1037                           ;	WRT3 = 0x1, unprogrammed default
  1038                           ;	Write Protection Block 3
  1039                           ;	WRT4 = 0x1, unprogrammed default
  1040                           ;	Write Protection Block 3
  1041                           ;	WRT5 = 0x1, unprogrammed default
  1042                           ;	Write Protection Block 3
  1043                           ;	WRT6 = 0x1, unprogrammed default
  1044                           ;	Write Protection Block 3
  1045                           ;	WRT7 = 0x1, unprogrammed default
  1046   300006                     	org	3145734
  1047   300006  FF                 	db	255
  1048                           
  1049                           ;Config register CONFIG4H @ 0x300007
  1050                           ;	unspecified, using default values
  1051                           ;	Configuration Register Write Protection bit
  1052                           ;	WRTC = 0x1, unprogrammed default
  1053                           ;	Boot Block Write Protection bit
  1054                           ;	WRTB = 0x1, unprogrammed default
  1055                           ;	Data EEPROM Write Protection bit
  1056                           ;	WRTD = 0x1, unprogrammed default
  1057                           ;	Scanner Enable bit
  1058                           ;	SCANE = 0x1, unprogrammed default
  1059                           ;	Low Voltage Programming Enable bit
  1060                           ;	LVP = 0x1, unprogrammed default
  1061   300007                     	org	3145735
  1062   300007  FF                 	db	255
  1063                           
  1064                           ;Config register CONFIG5L @ 0x300008
  1065                           ;	unspecified, using default values
  1066                           ;	UserNVM Program Memory Code Protection bit
  1067                           ;	CP = 0x1, unprogrammed default
  1068                           ;	DataNVM Memory Code Protection bit
  1069                           ;	CPD = 0x1, unprogrammed default
  1070   300008                     	org	3145736
  1071   300008  FF                 	db	255
  1072                           
  1073                           ;Config register CONFIG5H @ 0x300009
  1074                           ;	unspecified, using default values
  1075   300009                     	org	3145737
  1076   300009  FF                 	db	255
  1077                           
  1078                           ;Config register CONFIG6L @ 0x30000A
  1079                           ;	unspecified, using default values
  1080                           ;	Table Read Protection Block 0
  1081                           ;	EBTR0 = 0x1, unprogrammed default
  1082                           ;	Table Read Protection Block 1
  1083                           ;	EBTR1 = 0x1, unprogrammed default
  1084                           ;	Table Read Protection Block 2
  1085                           ;	EBTR2 = 0x1, unprogrammed default
  1086                           ;	Table Read Protection Block 3
  1087                           ;	EBTR3 = 0x1, unprogrammed default
  1088                           ;	Table Read Protection Block 4
  1089                           ;	EBTR4 = 0x1, unprogrammed default
  1090                           ;	Table Read Protection Block 5
  1091                           ;	EBTR5 = 0x1, unprogrammed default
  1092                           ;	Table Read Protection Block 6
  1093                           ;	EBTR6 = 0x1, unprogrammed default
  1094                           ;	Table Read Protection Block 7
  1095                           ;	EBTR7 = 0x1, unprogrammed default
  1096   30000A                     	org	3145738
  1097   30000A  FF                 	db	255
  1098                           
  1099                           ;Config register CONFIG6H @ 0x30000B
  1100                           ;	unspecified, using default values
  1101                           ;	Boot Block Table Read Protection bit
  1102                           ;	EBTRB = 0x1, unprogrammed default
  1103   30000B                     	org	3145739
  1104   30000B  FF                 	db	255
  1105                           tosu	equ	0xFFF
  1106                           tosh	equ	0xFFE
  1107                           tosl	equ	0xFFD
  1108                           stkptr	equ	0xFFC
  1109                           pclatu	equ	0xFFB
  1110                           pclath	equ	0xFFA
  1111                           pcl	equ	0xFF9
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           prodh	equ	0xFF4
  1117                           prodl	equ	0xFF3
  1118                           indf0	equ	0xFEF
  1119                           postinc0	equ	0xFEE
  1120                           postdec0	equ	0xFED
  1121                           preinc0	equ	0xFEC
  1122                           plusw0	equ	0xFEB
  1123                           fsr0h	equ	0xFEA
  1124                           fsr0l	equ	0xFE9
  1125                           wreg	equ	0xFE8
  1126                           indf1	equ	0xFE7
  1127                           postinc1	equ	0xFE6
  1128                           postdec1	equ	0xFE5
  1129                           preinc1	equ	0xFE4
  1130                           plusw1	equ	0xFE3
  1131                           fsr1h	equ	0xFE2
  1132                           fsr1l	equ	0xFE1
  1133                           bsr	equ	0xFE0
  1134                           indf2	equ	0xFDF
  1135                           postinc2	equ	0xFDE
  1136                           postdec2	equ	0xFDD
  1137                           preinc2	equ	0xFDC
  1138                           plusw2	equ	0xFDB
  1139                           fsr2h	equ	0xFDA
  1140                           fsr2l	equ	0xFD9
  1141                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         85
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      54
    BANK0           160      0      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    turnLeft90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnLeft90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turn180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turn180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turn180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turn180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    fullSpeedBackwards@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    fullSpeedBackwards@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    fullSpeedBackwards@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    fullSpeedBackwards@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    S1069DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    S1069DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 


Critical Paths under _main in COMRAM

    _main->_initDCmotorsPWM

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0     340
                                             11 COMRAM    18    18      0
                    _initDCmotorsPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              9 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _LowISR                                               4     4      0       0
                                              5 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _HighISR                                              3     3      0      38
                                              2 COMRAM     3     3      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
                     _putCharToRxBuf
 ---------------------------------------------------------------------------------
 (4) _putCharToRxBuf                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initDCmotorsPWM

 _LowISR (ROOT)

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf
   _putCharToRxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      63        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1D      36       1       57.4%
BITBIGSFRhllllh     52      0       0      42        0.0%
BITBIGSFRhlllll     37      0       0      44        0.0%
BITBIGSFRllh        2D      0       0      47        0.0%
BITBIGSFRlllhll     2A      0       0      54        0.0%
BITBIGSFRlllll      26      0       0      61        0.0%
BITBIGSFRlllhhh     1E      0       0      48        0.0%
BITBIGSFRhhhlll     1E      0       0      38        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      49        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhll      9      0       0      58        0.0%
BITBIGSFRhlllll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      60        0.0%
BITBIGSFRlllhll      6      0       0      53        0.0%
BITBIGSFRlllhll      5      0       0      56        0.0%
BITBIGSFRlllhlh      5      0       0      52        0.0%
BITBIGSFRlllhll      3      0       0      55        0.0%
BITBIGSFRlllhll      3      0       0      57        0.0%
BITBIGSFRlllhhl      3      0       0      51        0.0%
BITBIGSFRhlllll      2      0       0      43        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      50        0.0%
BITBIGSFRhlllhh      1      0       0      40        0.0%
BITBIGSFRhlllhl      1      0       0      41        0.0%
BITBIGSFRhlh         1      0       0      39        0.0%
BITBIGSFRlllhll      1      0       0      59        0.0%
BITBIGSFRlh          1      0       0      46        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      72      62        0.0%
DATA                 0      0      72       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Feb 27 16:35:30 2023

                      bsr 000FE0                       l154 010C                       l397 01BC  
                     wreg 000FE8                      l1511 00B8                      l1521 00F4  
                    l1513 00DC                      l1505 007E                      l1523 00FE  
                    l1515 00E6                      l1507 008E                      l1525 0100  
                    l1517 00E8                      l1509 00B4                      l1527 010A  
                    l1519 00F2                      l1571 0180                      l1581 019E  
                    l1573 0184                      l1565 016C                      l1583 01A2  
                    l1575 018C                      l1567 0178                      l1585 01A6  
                    l1577 0194                      l1569 017C                      l1587 01AE  
                    l1579 019A                      l1589 01B6              _BAUD4CONbits 000EE9  
                    _T2PR 000FBC                      _main 016C                      fsr2h 000FDA  
                    indf2 000FDF                      fsr2l 000FD9                      btemp 0037  
                    start 007A           __end_of_HighISR 016C              ___param_bank 000000  
                   ?_main 0001                     i1l271 006A                     i2l342 0214  
                   i2l356 024E                     i2l349 01EA                     i2l277 0148  
                   i2l279 0160                     _TMR0H 000FD4                     _TMR0L 000FD3  
                   ttemp5 0038                     ttemp6 003B                     ttemp7 003F  
                   status 000FD8                     wtemp8 0038        putCharToRxBuf@byte 0001  
         __initialization 0216              __end_of_main 01C0                    ??_main 000C  
           __activetblptr 000000                    _CCPR1H 000FAA                    _CCPR2H 000FA6  
                  _CCPR3H 000F25                    _CCPR4H 000F21                    _RC0PPS 000E62  
                  _RC4REG 000EE3                    i1l1401 0062                    i1l1403 0066  
                  _RE2PPS 000E74                    i1l1393 0026                    i1l1395 0036  
                  _RD5PPS 000E6F                    _RC7PPS 000E69                    i1l1397 005A  
                  i1l1399 005E                    _RE4PPS 000E76                    _RD6PPS 000E70  
                  i2l1251 0238                    i2l1243 01EE                    i2l1245 01FE  
                  i2l1247 0202                    i2l1249 0212                    i2l1531 01D0  
                  i2l1533 01D4                    i2l1551 0130                    i2l1529 01C0  
                  i2l1553 0144                    i2l1545 0116                    i2l1555 0158  
                  i2l1547 0126                    i2l1549 012A                    _RG6PPS 000E88  
               ??_HighISR 0003                    _RX4PPS 000E15                    _TX4REG 000EE4  
                  _LowISR 0018              _CCPTMRS0bits 000FAD          _getCharFromTxBuf 01C0  
                  clear_0 021C                    clear_1 0228                    isa$std 000001  
       ??_initDCmotorsPWM 000C     __end_of_isDataInTxBuf 0250                __accesstop 0060  
 __end_of__initialization 022E             ___rparam_used 000001            __pcstackCOMRAM 0001  
              __pbssBANK0 0060                   ?_LowISR 0001              _T2CLKCONbits 000FBF  
                 _SP4BRGH 000EE6                   _SP4BRGL 000EE5                   i1u35_20 0036  
                 i1u35_21 0032                   i1u36_20 0048                   i1u36_21 0040  
                 i2u21_40 01FE                   i2u21_41 01FA                   i1u37_28 004A  
                 i2u22_40 024C                   i2u22_41 0246                   i2u23_40 024E  
                 i2u50_40 0158                   i2u50_41 0154                   i2u46_40 01D0  
                 i2u46_41 01CC                   i2u48_40 0126                   i2u48_41 0122  
                 i2u49_40 0144                   i2u49_41 0140                   _SSP2ADD 000ED6  
                 _SSP2BUF 000ED5                   _HighISR 0008                   __Hparam 0000  
                 __Lparam 0000                   __pcinit 0216                   __ramtop 0E00  
                 __ptext0 016C                   __ptext1 007E                   __ptext4 01EC  
                 __ptext5 0238                   __ptext6 01C0                 _T2CONbits 000FBD  
               _T2HLTbits 000FBE             _RxBufWriteCnt 0036  __end_of_getCharFromTxBuf 01EC  
                 _tmr_ovf 0032            __pintcode_body 010E      end_of_initialization 022E  
                 int_func 010E                   postinc0 000FEE           _initDCmotorsPWM 007E  
               _TRISAbits 000F81                 _TRISCbits 000F83                 _TRISDbits 000F84  
               _TRISEbits 000F85                 _TRISFbits 000F86                 _TRISGbits 000F87  
             _CCP1CONbits 000FAB              _EUSART4RXbuf 001E              _EUSART4TXbuf 0060  
             _CCP2CONbits 000FA7               _CCP3CONbits 000F26               _CCP4CONbits 000F22  
              main@motorL 000C                main@motorR 0015            __end_of_LowISR 007A  
     start_initialization 0216             _TxBufWriteCnt 0034                  ??_LowISR 0006  
 __end_of_initDCmotorsPWM 010E            _putCharToRxBuf 01EC               __pbssCOMRAM 001E  
                ?_HighISR 0001    __end_of_putCharToRxBuf 0216                 __pintcode 0008  
             __pintcodelo 0018              _RxBufReadCnt 0035  initDCmotorsPWM@PWMperiod 000A  
       ?_getCharFromTxBuf 0001        ??_getCharFromTxBuf 0001                  _LATAbits 000F79  
                _LATCbits 000F7B             _isDataInTxBuf 0238                  _LATEbits 000F7D  
                _LATFbits 000F7E                  _LATGbits 000F7F                  _LATHbits 000F80  
                _IPR0bits 000E1F                  _PIE0bits 000E29                  _PIE4bits 000E2D  
                _PIR0bits 000E33                  HighISR@a 0005                  _PIR4bits 000E37  
         ?_putCharToRxBuf 0001          ?_initDCmotorsPWM 000A                  _SSP2CON2 000EDA  
                _SSP2STAT 000ED8              _TxBufReadCnt 0033            ?_isDataInTxBuf 0001  
                __Hrparam 0000                  __Lrparam 0000                _ANSELDbits 000EA7  
              _T0CON0bits 000FD5                _T0CON1bits 000FD6              _SSP2CON1bits 000ED9  
            _SSP2CON2bits 000EDA                  isa$xinst 000000                _RC4STAbits 000EE7  
                int$flags 0037                _INTCONbits 000FF2           ??_isDataInTxBuf 0001  
                intlevel1 0000                  intlevel2 0000                _SSP2DATPPS 000E1D  
              _SSP2CLKPPS 000E1C                _TX4STAbits 000EE8          ??_putCharToRxBuf 0001  
