

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Mar 05 18:28:45 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31   000000                     
    32                           ; Generated 06/04/2022 GMT
    33                           ; 
    34                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution. Publication is not required when
    48                           ;        this file is used in an embedded application.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F67K40 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66   000000                     _T0CON0bits	set	4053
    67   000000                     _T0CON1bits	set	4054
    68   000000                     _RC4STAbits	set	3815
    69   000000                     _SP4BRGH	set	3814
    70   000000                     _SP4BRGL	set	3813
    71   000000                     _TX4STAbits	set	3816
    72   000000                     _BAUD4CONbits	set	3817
    73   000000                     _TX4REG	set	3812
    74   000000                     _LATHbits	set	3968
    75   000000                     _TRISEbits	set	3973
    76   000000                     _TRISFbits	set	3974
    77   000000                     _TRISGbits	set	3975
    78   000000                     _SSP2CON2bits	set	3802
    79   000000                     _RX4PPS	set	3605
    80   000000                     _SSP2CLKPPS	set	3612
    81   000000                     _SSP2DATPPS	set	3613
    82   000000                     _ANSELDbits	set	3751
    83   000000                     _SSP2ADD	set	3798
    84   000000                     _SSP2CON1bits	set	3801
    85   000000                     _RC4REG	set	3811
    86   000000                     _LATAbits	set	3961
    87   000000                     _LATGbits	set	3967
    88   000000                     _TRISAbits	set	3969
    89   000000                     _SSP2CON2	set	3802
    90   000000                     _TRISDbits	set	3972
    91   000000                     _CCPR4H	set	3873
    92   000000                     _CCPR3H	set	3877
    93   000000                     _SSP2STAT	set	3800
    94   000000                     _SSP2BUF	set	3797
    95   000000                     _IPR0bits	set	3615
    96   000000                     _PIE0bits	set	3625
    97   000000                     _RC7PPS	set	3689
    98   000000                     _RD5PPS	set	3695
    99   000000                     _RE2PPS	set	3700
   100   000000                     _RD6PPS	set	3696
   101   000000                     _T2PR	set	4028
   102   000000                     _T2CONbits	set	4029
   103   000000                     _CCPR2H	set	4006
   104   000000                     _CCPR1H	set	4010
   105   000000                     _TRISCbits	set	3971
   106   000000                     _LATCbits	set	3963
   107   000000                     _LATEbits	set	3965
   108   000000                     _LATFbits	set	3966
   109   000000                     _RE4PPS	set	3702
   110   000000                     _RG6PPS	set	3720
   111   000000                     _TMR0L	set	4051
   112   000000                     _TMR0H	set	4052
   113   000000                     _INTCONbits	set	4082
   114   000000                     _T2CLKCONbits	set	4031
   115   000000                     _T2HLTbits	set	4030
   116   000000                     _CCP1CONbits	set	4011
   117   000000                     _CCPTMRS0bits	set	4013
   118   000000                     _CCP2CONbits	set	4007
   119   000000                     _CCP3CONbits	set	3878
   120   000000                     _CCP4CONbits	set	3874
   121   000000                     _PIE4bits	set	3629
   122   000000                     _PIR0bits	set	3635
   123   000000                     _PIR4bits	set	3639
   124   000000                     _RC0PPS	set	3682
   125                           
   126                           ; #config settings
   127                           
   128                           	psect	cinit
   129   000926                     __pcinit:
   130                           	callstack 0
   131   000926                     start_initialization:
   132                           	callstack 0
   133   000926                     __initialization:
   134                           	callstack 0
   135                           
   136                           ; Clear objects allocated to BANK0 (60 bytes)
   137   000926  EE00  F060         	lfsr	0,__pbssBANK0
   138   00092A  0E3C               	movlw	60
   139   00092C                     clear_0:
   140   00092C  6AEE               	clrf	postinc0,c
   141   00092E  06E8               	decf	wreg,f,c
   142   000930  E1FD               	bnz	clear_0
   143                           
   144                           ; Clear objects allocated to COMRAM (25 bytes)
   145   000932  EE00  F030         	lfsr	0,__pbssCOMRAM
   146   000936  0E19               	movlw	25
   147   000938                     clear_1:
   148   000938  6AEE               	clrf	postinc0,c
   149   00093A  06E8               	decf	wreg,f,c
   150   00093C  E1FD               	bnz	clear_1
   151   00093E                     end_of_initialization:
   152                           	callstack 0
   153   00093E                     __end_of__initialization:
   154                           	callstack 0
   155   00093E  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   156   000940  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   157   000942  0100               	movlb	0
   158   000944  EF5B  F003         	goto	_main	;jump to C main() function
   159                           
   160                           	psect	bssCOMRAM
   161   000030                     __pbssCOMRAM:
   162                           	callstack 0
   163   000030                     _EUSART4RXbuf:
   164                           	callstack 0
   165   000030                     	ds	20
   166   000044                     _tmr_ovf:
   167                           	callstack 0
   168   000044                     	ds	1
   169   000045                     _TxBufReadCnt:
   170                           	callstack 0
   171   000045                     	ds	1
   172   000046                     _TxBufWriteCnt:
   173                           	callstack 0
   174   000046                     	ds	1
   175   000047                     _RxBufReadCnt:
   176                           	callstack 0
   177   000047                     	ds	1
   178   000048                     _RxBufWriteCnt:
   179                           	callstack 0
   180   000048                     	ds	1
   181                           
   182                           	psect	bssBANK0
   183   000060                     __pbssBANK0:
   184                           	callstack 0
   185   000060                     _EUSART4TXbuf:
   186                           	callstack 0
   187   000060                     	ds	60
   188                           
   189                           	psect	cstackBANK0
   190   00009C                     __pcstackBANK0:
   191                           	callstack 0
   192   00009C                     main@motorL:
   193                           	callstack 0
   194                           
   195                           ; 9 bytes @ 0x0
   196   00009C                     	ds	9
   197   0000A5                     main@motorR:
   198                           	callstack 0
   199                           
   200                           ; 9 bytes @ 0x9
   201   0000A5                     	ds	9
   202                           
   203                           	psect	cstackCOMRAM
   204   000001                     __pcstackCOMRAM:
   205                           	callstack 0
   206   000001                     ??_getCharFromTxBuf:
   207   000001                     putCharToRxBuf@byte:
   208                           	callstack 0
   209                           
   210                           ; 1 bytes @ 0x0
   211   000001                     	ds	2
   212   000003                     ??_HighISR:
   213                           
   214                           ; 1 bytes @ 0x2
   215   000003                     	ds	2
   216   000005                     HighISR@a:
   217                           	callstack 0
   218                           
   219                           ; 1 bytes @ 0x4
   220   000005                     	ds	1
   221   000006                     ??_LowISR:
   222                           
   223                           ; 1 bytes @ 0x5
   224   000006                     	ds	4
   225   00000A                     ?___wmul:
   226                           	callstack 0
   227   00000A                     initDCmotorsPWM@PWMperiod:
   228                           	callstack 0
   229   00000A                     ___wmul@multiplier:
   230                           	callstack 0
   231                           
   232                           ; 2 bytes @ 0x9
   233   00000A                     	ds	2
   234   00000C                     ___wmul@multiplicand:
   235                           	callstack 0
   236                           
   237                           ; 2 bytes @ 0xB
   238   00000C                     	ds	2
   239   00000E                     ___wmul@product:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0xD
   243   00000E                     	ds	2
   244   000010                     ?___lwdiv:
   245                           	callstack 0
   246   000010                     ___lwdiv@dividend:
   247                           	callstack 0
   248                           
   249                           ; 2 bytes @ 0xF
   250   000010                     	ds	2
   251   000012                     ___lwdiv@divisor:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x11
   255   000012                     	ds	2
   256   000014                     ___lwdiv@counter:
   257                           	callstack 0
   258                           
   259                           ; 1 bytes @ 0x13
   260   000014                     	ds	1
   261   000015                     ___lwdiv@quotient:
   262                           	callstack 0
   263                           
   264                           ; 2 bytes @ 0x14
   265   000015                     	ds	2
   266   000017                     setMotorPWM@m:
   267                           	callstack 0
   268                           
   269                           ; 2 bytes @ 0x16
   270   000017                     	ds	2
   271   000019                     ??_setMotorPWM:
   272                           
   273                           ; 1 bytes @ 0x18
   274   000019                     	ds	2
   275   00001B                     setMotorPWM@posDuty:
   276                           	callstack 0
   277                           
   278                           ; 1 bytes @ 0x1A
   279   00001B                     	ds	1
   280   00001C                     setMotorPWM@negDuty:
   281                           	callstack 0
   282                           
   283                           ; 1 bytes @ 0x1B
   284   00001C                     	ds	1
   285   00001D                     stop@mL:
   286                           	callstack 0
   287   00001D                     turnRight@mL:
   288                           	callstack 0
   289   00001D                     fullSpeedBackwards@mL:
   290                           	callstack 0
   291                           
   292                           ; 2 bytes @ 0x1C
   293   00001D                     	ds	2
   294   00001F                     stop@mR:
   295                           	callstack 0
   296   00001F                     turnRight@mR:
   297                           	callstack 0
   298   00001F                     fullSpeedBackwards@mR:
   299                           	callstack 0
   300                           
   301                           ; 2 bytes @ 0x1E
   302   00001F                     	ds	2
   303   000021                     ??_stop:
   304   000021                     ??_turnRight:
   305   000021                     ??_fullSpeedBackwards:
   306                           
   307                           ; 1 bytes @ 0x20
   308   000021                     	ds	2
   309   000023                     turnRight90@mL:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0x22
   313   000023                     	ds	2
   314   000025                     turnRight90@mR:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0x24
   318   000025                     	ds	2
   319   000027                     turnRight90@a:
   320                           	callstack 0
   321                           
   322                           ; 1 bytes @ 0x26
   323   000027                     	ds	1
   324   000028                     yellowInstructions@mL:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0x27
   328   000028                     	ds	2
   329   00002A                     yellowInstructions@mR:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0x29
   333   00002A                     	ds	2
   334   00002C                     ??_yellowInstructions:
   335                           
   336                           ; 1 bytes @ 0x2B
   337   00002C                     	ds	2
   338   00002E                     ??_main:
   339                           
   340                           ; 1 bytes @ 0x2D
   341   00002E                     	ds	2
   342                           
   343 ;;
   344 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   345 ;;
   346 ;; *************** function _main *****************
   347 ;; Defined at:
   348 ;;		line 14 in file "main_motor.c"
   349 ;; Parameters:    Size  Location     Type
   350 ;;		None
   351 ;; Auto vars:     Size  Location     Type
   352 ;;  motorR          9    9[BANK0 ] struct DC_motor
   353 ;;  motorL          9    0[BANK0 ] struct DC_motor
   354 ;; Return value:  Size  Location     Type
   355 ;;                  1    wreg      void 
   356 ;; Registers used:
   357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   358 ;; Tracked objects:
   359 ;;		On entry : 0/0
   360 ;;		On exit  : 0/0
   361 ;;		Unchanged: 0/0
   362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   364 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   365 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   366 ;;      Totals:         2      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   367 ;;Total ram usage:       20 bytes
   368 ;; Hardware stack levels required when called: 8
   369 ;; This function calls:
   370 ;;		_initDCmotorsPWM
   371 ;;		_yellowInstructions
   372 ;; This function is called by:
   373 ;;		Startup code after reset
   374 ;; This function uses a non-reentrant model
   375 ;;
   376                           
   377                           	psect	text0
   378   0006B6                     __ptext0:
   379                           	callstack 0
   380   0006B6                     _main:
   381                           	callstack 23
   382   0006B6                     
   383                           ;main_motor.c: 16:     initDCmotorsPWM(99);
   384   0006B6  0E00               	movlw	0
   385   0006B8  6E0B               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   386   0006BA  0E63               	movlw	99
   387   0006BC  6E0A               	movwf	initDCmotorsPWM@PWMperiod^0,c
   388   0006BE  EC13  F003         	call	_initDCmotorsPWM	;wreg free
   389   0006C2                     
   390                           ;main_motor.c: 18:     struct DC_motor motorL, motorR;;main_motor.c: 20:     motorL.powe
      +                          r=0;
   391   0006C2  0E00               	movlw	0
   392   0006C4  0100               	movlb	0	; () banked
   393   0006C6  6F9C               	movwf	main@motorL& (0+255),b
   394   0006C8                     
   395                           ; BSR set to: 0
   396                           ;main_motor.c: 21:     motorL.direction=1;
   397   0006C8  0E01               	movlw	1
   398   0006CA  6F9D               	movwf	(main@motorL+1)& (0+255),b
   399   0006CC                     
   400                           ; BSR set to: 0
   401                           ;main_motor.c: 22:     motorL.brakemode=1;
   402   0006CC  0E01               	movlw	1
   403   0006CE  6F9E               	movwf	(main@motorL+2)& (0+255),b
   404   0006D0                     
   405                           ; BSR set to: 0
   406                           ;main_motor.c: 23:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   407   0006D0  0EAA               	movlw	170
   408   0006D2  6FA1               	movwf	(main@motorL+5)& (0+255),b
   409   0006D4  0E0F               	movlw	15
   410   0006D6  6FA2               	movwf	(main@motorL+6)& (0+255),b
   411   0006D8                     
   412                           ; BSR set to: 0
   413                           ;main_motor.c: 24:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   414   0006D8  0EA6               	movlw	166
   415   0006DA  6FA3               	movwf	(main@motorL+7)& (0+255),b
   416   0006DC  0E0F               	movlw	15
   417   0006DE  6FA4               	movwf	(main@motorL+8)& (0+255),b
   418   0006E0                     
   419                           ; BSR set to: 0
   420                           ;main_motor.c: 25:     motorL.PWMperiod= T2PR;
   421   0006E0  CFBC F09F          	movff	4028,main@motorL+3	;volatile
   422   0006E4  6BA0               	clrf	(main@motorL+4)& (0+255),b
   423   0006E6                     
   424                           ; BSR set to: 0
   425                           ;main_motor.c: 27:     motorR.power=0;
   426   0006E6  0E00               	movlw	0
   427   0006E8  6FA5               	movwf	main@motorR& (0+255),b
   428   0006EA                     
   429                           ; BSR set to: 0
   430                           ;main_motor.c: 28:     motorR.direction=1;
   431   0006EA  0E01               	movlw	1
   432   0006EC  6FA6               	movwf	(main@motorR+1)& (0+255),b
   433   0006EE                     
   434                           ; BSR set to: 0
   435                           ;main_motor.c: 29:     motorR.brakemode=1;
   436   0006EE  0E01               	movlw	1
   437   0006F0  6FA7               	movwf	(main@motorR+2)& (0+255),b
   438   0006F2                     
   439                           ; BSR set to: 0
   440                           ;main_motor.c: 30:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   441   0006F2  0E25               	movlw	37
   442   0006F4  6FAA               	movwf	(main@motorR+5)& (0+255),b
   443   0006F6  0E0F               	movlw	15
   444   0006F8  6FAB               	movwf	(main@motorR+6)& (0+255),b
   445   0006FA                     
   446                           ; BSR set to: 0
   447                           ;main_motor.c: 31:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   448   0006FA  0E21               	movlw	33
   449   0006FC  6FAC               	movwf	(main@motorR+7)& (0+255),b
   450   0006FE  0E0F               	movlw	15
   451   000700  6FAD               	movwf	(main@motorR+8)& (0+255),b
   452   000702                     
   453                           ; BSR set to: 0
   454                           ;main_motor.c: 32:     motorR.PWMperiod= T2PR;
   455   000702  CFBC F0A8          	movff	4028,main@motorR+3	;volatile
   456   000706  6BA9               	clrf	(main@motorR+4)& (0+255),b
   457   000708                     l2236:
   458                           
   459                           ;main_motor.c: 36:         yellowInstructions(&motorL, &motorR);
   460   000708  0E9C               	movlw	low main@motorL
   461   00070A  6E28               	movwf	yellowInstructions@mL^0,c
   462   00070C  0E00               	movlw	high main@motorL
   463   00070E  6E29               	movwf	(yellowInstructions@mL+1)^0,c
   464   000710  0EA5               	movlw	low main@motorR
   465   000712  6E2A               	movwf	yellowInstructions@mR^0,c
   466   000714  0E00               	movlw	high main@motorR
   467   000716  6E2B               	movwf	(yellowInstructions@mR+1)^0,c
   468   000718  EC34  F004         	call	_yellowInstructions	;wreg free
   469   00071C                     
   470                           ;main_motor.c: 37:         _delay((unsigned long)((500)*(64000000/4000.0)));
   471   00071C  0E29               	movlw	41
   472   00071E  6E2F               	movwf	(??_main+1)^0,c
   473   000720  0E96               	movlw	150
   474   000722  6E2E               	movwf	??_main^0,c
   475   000724  0E7F               	movlw	127
   476   000726                     u1217:
   477   000726  2EE8               	decfsz	wreg,f,c
   478   000728  D7FE               	bra	u1217
   479   00072A  2E2E               	decfsz	??_main^0,f,c
   480   00072C  D7FC               	bra	u1217
   481   00072E  2E2F               	decfsz	(??_main+1)^0,f,c
   482   000730  D7FA               	bra	u1217
   483   000732  F000               	nop	
   484   000734  EF84  F003         	goto	l2236
   485   000738  EF3D  F000         	goto	start
   486   00073C                     __end_of_main:
   487                           	callstack 0
   488                           
   489 ;; *************** function _yellowInstructions *****************
   490 ;; Defined at:
   491 ;;		line 291 in file "dc_motor.c"
   492 ;; Parameters:    Size  Location     Type
   493 ;;  mL              2   39[COMRAM] PTR struct DC_motor
   494 ;;		 -> main@motorL(9), 
   495 ;;  mR              2   41[COMRAM] PTR struct DC_motor
   496 ;;		 -> main@motorR(9), 
   497 ;; Auto vars:     Size  Location     Type
   498 ;;		None
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      void 
   501 ;; Registers used:
   502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   508 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   510 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   511 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   512 ;;Total ram usage:        6 bytes
   513 ;; Hardware stack levels used: 1
   514 ;; Hardware stack levels required when called: 7
   515 ;; This function calls:
   516 ;;		_fullSpeedBackwards
   517 ;;		_turnRight90
   518 ;; This function is called by:
   519 ;;		_main
   520 ;; This function uses a non-reentrant model
   521 ;;
   522                           
   523                           	psect	text1
   524   000868                     __ptext1:
   525                           	callstack 0
   526   000868                     _yellowInstructions:
   527                           	callstack 23
   528   000868                     
   529                           ;dc_motor.c: 293:     fullSpeedBackwards(mL, mR);
   530   000868  C028  F01D         	movff	yellowInstructions@mL,fullSpeedBackwards@mL
   531   00086C  C029  F01E         	movff	yellowInstructions@mL+1,fullSpeedBackwards@mL+1
   532   000870  C02A  F01F         	movff	yellowInstructions@mR,fullSpeedBackwards@mR
   533   000874  C02B  F020         	movff	yellowInstructions@mR+1,fullSpeedBackwards@mR+1
   534   000878  ECA8  F002         	call	_fullSpeedBackwards	;wreg free
   535   00087C                     
   536                           ;dc_motor.c: 294:     _delay((unsigned long)((500)*(64000000/4000.0)));
   537   00087C  0E29               	movlw	41
   538   00087E  6E2D               	movwf	(??_yellowInstructions+1)^0,c
   539   000880  0E96               	movlw	150
   540   000882  6E2C               	movwf	??_yellowInstructions^0,c
   541   000884  0E7F               	movlw	127
   542   000886                     u1227:
   543   000886  2EE8               	decfsz	wreg,f,c
   544   000888  D7FE               	bra	u1227
   545   00088A  2E2C               	decfsz	??_yellowInstructions^0,f,c
   546   00088C  D7FC               	bra	u1227
   547   00088E  2E2D               	decfsz	(??_yellowInstructions+1)^0,f,c
   548   000890  D7FA               	bra	u1227
   549   000892  F000               	nop	
   550   000894                     
   551                           ;dc_motor.c: 295:     turnRight90(mL, mR);
   552   000894  C028  F023         	movff	yellowInstructions@mL,turnRight90@mL
   553   000898  C029  F024         	movff	yellowInstructions@mL+1,turnRight90@mL+1
   554   00089C  C02A  F025         	movff	yellowInstructions@mR,turnRight90@mR
   555   0008A0  C02B  F026         	movff	yellowInstructions@mR+1,turnRight90@mR+1
   556   0008A4  EC07  F004         	call	_turnRight90	;wreg free
   557   0008A8  0012               	return		;funcret
   558   0008AA                     __end_of_yellowInstructions:
   559                           	callstack 0
   560                           
   561 ;; *************** function _turnRight90 *****************
   562 ;; Defined at:
   563 ;;		line 239 in file "dc_motor.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;  mL              2   34[COMRAM] PTR struct DC_motor
   566 ;;		 -> main@motorL(9), 
   567 ;;  mR              2   36[COMRAM] PTR struct DC_motor
   568 ;;		 -> main@motorR(9), 
   569 ;; Auto vars:     Size  Location     Type
   570 ;;  a               1   38[COMRAM] unsigned char 
   571 ;; Return value:  Size  Location     Type
   572 ;;                  1    wreg      void 
   573 ;; Registers used:
   574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   575 ;; Tracked objects:
   576 ;;		On entry : 0/0
   577 ;;		On exit  : 0/0
   578 ;;		Unchanged: 0/0
   579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   580 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   581 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   583 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   584 ;;Total ram usage:        5 bytes
   585 ;; Hardware stack levels used: 1
   586 ;; Hardware stack levels required when called: 6
   587 ;; This function calls:
   588 ;;		_stop
   589 ;;		_turnRight
   590 ;; This function is called by:
   591 ;;		_yellowInstructions
   592 ;;		_pinkInstructions
   593 ;; This function uses a non-reentrant model
   594 ;;
   595                           
   596                           	psect	text2
   597   00080E                     __ptext2:
   598                           	callstack 0
   599   00080E                     _turnRight90:
   600                           	callstack 23
   601   00080E                     
   602                           ;dc_motor.c: 241:     unsigned char a=0;
   603   00080E  0E00               	movlw	0
   604   000810  6E27               	movwf	turnRight90@a^0,c
   605                           
   606                           ;dc_motor.c: 242:     while(a<60){
   607   000812  EF16  F004         	goto	l2094
   608   000816                     l2090:
   609                           
   610                           ;dc_motor.c: 243:         turnRight(mL, mR);
   611   000816  C023  F01D         	movff	turnRight90@mL,turnRight@mL
   612   00081A  C024  F01E         	movff	turnRight90@mL+1,turnRight@mL+1
   613   00081E  C025  F01F         	movff	turnRight90@mR,turnRight@mR
   614   000822  C026  F020         	movff	turnRight90@mR+1,turnRight@mR+1
   615   000826  EC3D  F002         	call	_turnRight	;wreg free
   616   00082A                     
   617                           ;dc_motor.c: 244:         a++;
   618   00082A  2A27               	incf	turnRight90@a^0,f,c
   619   00082C                     l2094:
   620                           
   621                           ;dc_motor.c: 242:     while(a<60){
   622   00082C  0E3B               	movlw	59
   623   00082E  6427               	cpfsgt	turnRight90@a^0,c
   624   000830  EF1C  F004         	goto	u1111
   625   000834  EF1E  F004         	goto	u1110
   626   000838                     u1111:
   627   000838  EF0B  F004         	goto	l2090
   628   00083C                     u1110:
   629   00083C  EF2B  F004         	goto	l2100
   630   000840                     l2096:
   631                           
   632                           ;dc_motor.c: 247:         stop(mL, mR);
   633   000840  C023  F01D         	movff	turnRight90@mL,stop@mL
   634   000844  C024  F01E         	movff	turnRight90@mL+1,stop@mL+1
   635   000848  C025  F01F         	movff	turnRight90@mR,stop@mR
   636   00084C  C026  F020         	movff	turnRight90@mR+1,stop@mR+1
   637   000850  EC3F  F000         	call	_stop	;wreg free
   638   000854                     
   639                           ;dc_motor.c: 248:         a--;
   640   000854  0627               	decf	turnRight90@a^0,f,c
   641   000856                     l2100:
   642                           
   643                           ;dc_motor.c: 246:     while(a>0){
   644   000856  5027               	movf	turnRight90@a^0,w,c
   645   000858  A4D8               	btfss	status,2,c
   646   00085A  EF31  F004         	goto	u1121
   647   00085E  EF33  F004         	goto	u1120
   648   000862                     u1121:
   649   000862  EF20  F004         	goto	l2096
   650   000866                     u1120:
   651   000866  0012               	return		;funcret
   652   000868                     __end_of_turnRight90:
   653                           	callstack 0
   654                           
   655 ;; *************** function _turnRight *****************
   656 ;; Defined at:
   657 ;;		line 161 in file "dc_motor.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;  mL              2   28[COMRAM] PTR struct DC_motor
   660 ;;		 -> main@motorL(9), 
   661 ;;  mR              2   30[COMRAM] PTR struct DC_motor
   662 ;;		 -> main@motorR(9), 
   663 ;; Auto vars:     Size  Location     Type
   664 ;;		None
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   676 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   677 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   678 ;;Total ram usage:        6 bytes
   679 ;; Hardware stack levels used: 1
   680 ;; Hardware stack levels required when called: 5
   681 ;; This function calls:
   682 ;;		_setMotorPWM
   683 ;; This function is called by:
   684 ;;		_turnRight90
   685 ;;		_turn180
   686 ;;		_turnRight135
   687 ;; This function uses a non-reentrant model
   688 ;;
   689                           
   690                           	psect	text3
   691   00047A                     __ptext3:
   692                           	callstack 0
   693   00047A                     _turnRight:
   694                           	callstack 23
   695   00047A                     
   696                           ;dc_motor.c: 161: void turnRight(DC_motor *mL, DC_motor *mR);dc_motor.c: 162: {;dc_motor
      +                          .c: 164:     mL->direction = 0;
   697   00047A  EE20 F001          	lfsr	2,1
   698   00047E  501D               	movf	turnRight@mL^0,w,c
   699   000480  26D9               	addwf	fsr2l,f,c
   700   000482  501E               	movf	(turnRight@mL+1)^0,w,c
   701   000484  22DA               	addwfc	fsr2h,f,c
   702   000486  0E00               	movlw	0
   703   000488  6EDF               	movwf	indf2,c
   704                           
   705                           ;dc_motor.c: 165:     mL->brakemode = 0;
   706   00048A  EE20 F002          	lfsr	2,2
   707   00048E  501D               	movf	turnRight@mL^0,w,c
   708   000490  26D9               	addwf	fsr2l,f,c
   709   000492  501E               	movf	(turnRight@mL+1)^0,w,c
   710   000494  22DA               	addwfc	fsr2h,f,c
   711   000496  0E00               	movlw	0
   712   000498  6EDF               	movwf	indf2,c
   713                           
   714                           ;dc_motor.c: 167:     mR->direction = 1;
   715   00049A  EE20 F001          	lfsr	2,1
   716   00049E  501F               	movf	turnRight@mR^0,w,c
   717   0004A0  26D9               	addwf	fsr2l,f,c
   718   0004A2  5020               	movf	(turnRight@mR+1)^0,w,c
   719   0004A4  22DA               	addwfc	fsr2h,f,c
   720   0004A6  0E01               	movlw	1
   721   0004A8  6EDF               	movwf	indf2,c
   722                           
   723                           ;dc_motor.c: 168:     mR->brakemode = 0;
   724   0004AA  EE20 F002          	lfsr	2,2
   725   0004AE  501F               	movf	turnRight@mR^0,w,c
   726   0004B0  26D9               	addwf	fsr2l,f,c
   727   0004B2  5020               	movf	(turnRight@mR+1)^0,w,c
   728   0004B4  22DA               	addwfc	fsr2h,f,c
   729   0004B6  0E00               	movlw	0
   730   0004B8  6EDF               	movwf	indf2,c
   731                           
   732                           ;dc_motor.c: 171:     if(mL->power>75){mL->power=75;}
   733   0004BA  C01D  FFD9         	movff	turnRight@mL,fsr2l
   734   0004BE  C01E  FFDA         	movff	turnRight@mL+1,fsr2h
   735   0004C2  50DF               	movf	indf2,w,c
   736   0004C4  0A80               	xorlw	128
   737   0004C6  0F34               	addlw	-204
   738   0004C8  A0D8               	btfss	status,0,c
   739   0004CA  EF69  F002         	goto	u1071
   740   0004CE  EF6B  F002         	goto	u1070
   741   0004D2                     u1071:
   742   0004D2  EF71  F002         	goto	l2056
   743   0004D6                     u1070:
   744   0004D6  C01D  FFD9         	movff	turnRight@mL,fsr2l
   745   0004DA  C01E  FFDA         	movff	turnRight@mL+1,fsr2h
   746   0004DE  0E4B               	movlw	75
   747   0004E0  6EDF               	movwf	indf2,c
   748   0004E2                     l2056:
   749                           
   750                           ;dc_motor.c: 172:     if(mR->power>75){mR->power=75;}
   751   0004E2  C01F  FFD9         	movff	turnRight@mR,fsr2l
   752   0004E6  C020  FFDA         	movff	turnRight@mR+1,fsr2h
   753   0004EA  50DF               	movf	indf2,w,c
   754   0004EC  0A80               	xorlw	128
   755   0004EE  0F34               	addlw	-204
   756   0004F0  A0D8               	btfss	status,0,c
   757   0004F2  EF7D  F002         	goto	u1081
   758   0004F6  EF7F  F002         	goto	u1080
   759   0004FA                     u1081:
   760   0004FA  EF85  F002         	goto	l2060
   761   0004FE                     u1080:
   762   0004FE  C01F  FFD9         	movff	turnRight@mR,fsr2l
   763   000502  C020  FFDA         	movff	turnRight@mR+1,fsr2h
   764   000506  0E4B               	movlw	75
   765   000508  6EDF               	movwf	indf2,c
   766   00050A                     l2060:
   767                           
   768                           ;dc_motor.c: 174:     ++mL->power;
   769   00050A  C01D  FFD9         	movff	turnRight@mL,fsr2l
   770   00050E  C01E  FFDA         	movff	turnRight@mL+1,fsr2h
   771   000512  2ADF               	incf	indf2,f,c
   772   000514                     
   773                           ;dc_motor.c: 175:     ++mR->power;
   774   000514  C01F  FFD9         	movff	turnRight@mR,fsr2l
   775   000518  C020  FFDA         	movff	turnRight@mR+1,fsr2h
   776   00051C  2ADF               	incf	indf2,f,c
   777   00051E                     
   778                           ;dc_motor.c: 177:     setMotorPWM(mL);
   779   00051E  C01D  F017         	movff	turnRight@mL,setMotorPWM@m
   780   000522  C01E  F018         	movff	turnRight@mL+1,setMotorPWM@m+1
   781   000526  EC87  F001         	call	_setMotorPWM	;wreg free
   782   00052A                     
   783                           ;dc_motor.c: 178:     setMotorPWM(mR);
   784   00052A  C01F  F017         	movff	turnRight@mR,setMotorPWM@m
   785   00052E  C020  F018         	movff	turnRight@mR+1,setMotorPWM@m+1
   786   000532  EC87  F001         	call	_setMotorPWM	;wreg free
   787   000536                     
   788                           ;dc_motor.c: 179:     _delay((unsigned long)((50)*(64000000/4000.0)));
   789   000536  0E05               	movlw	5
   790   000538  6E22               	movwf	(??_turnRight+1)^0,c
   791   00053A  0E0F               	movlw	15
   792   00053C  6E21               	movwf	??_turnRight^0,c
   793   00053E  0EF1               	movlw	241
   794   000540                     u1237:
   795   000540  2EE8               	decfsz	wreg,f,c
   796   000542  D7FE               	bra	u1237
   797   000544  2E21               	decfsz	??_turnRight^0,f,c
   798   000546  D7FC               	bra	u1237
   799   000548  2E22               	decfsz	(??_turnRight+1)^0,f,c
   800   00054A  D7FA               	bra	u1237
   801   00054C  F000               	nop	
   802   00054E  0012               	return		;funcret
   803   000550                     __end_of_turnRight:
   804                           	callstack 0
   805                           
   806 ;; *************** function _stop *****************
   807 ;; Defined at:
   808 ;;		line 87 in file "dc_motor.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;  mL              2   28[COMRAM] PTR struct DC_motor
   811 ;;		 -> main@motorL(9), 
   812 ;;  mR              2   30[COMRAM] PTR struct DC_motor
   813 ;;		 -> main@motorR(9), 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   825 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   827 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   828 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   829 ;;Total ram usage:        5 bytes
   830 ;; Hardware stack levels used: 1
   831 ;; Hardware stack levels required when called: 5
   832 ;; This function calls:
   833 ;;		_setMotorPWM
   834 ;; This function is called by:
   835 ;;		_turnRight90
   836 ;;		_turnLeft90
   837 ;;		_turn180
   838 ;;		_turnRight135
   839 ;;		_turnLeft135
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           	psect	text4
   844   00007E                     __ptext4:
   845                           	callstack 0
   846   00007E                     _stop:
   847                           	callstack 23
   848   00007E                     
   849                           ;dc_motor.c: 87: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 88: {;dc_motor.c: 89:
      +                               if(mL->direction==1 && mR->direction==1){
   850   00007E  EE20 F001          	lfsr	2,1
   851   000082  501D               	movf	stop@mL^0,w,c
   852   000084  26D9               	addwf	fsr2l,f,c
   853   000086  501E               	movf	(stop@mL+1)^0,w,c
   854   000088  22DA               	addwfc	fsr2h,f,c
   855   00008A  04DE               	decf	postinc2,w,c
   856   00008C  A4D8               	btfss	status,2,c
   857   00008E  EF4B  F000         	goto	u951
   858   000092  EF4D  F000         	goto	u950
   859   000096                     u951:
   860   000096  EFAC  F000         	goto	l2008
   861   00009A                     u950:
   862   00009A  EE20 F001          	lfsr	2,1
   863   00009E  501F               	movf	stop@mR^0,w,c
   864   0000A0  26D9               	addwf	fsr2l,f,c
   865   0000A2  5020               	movf	(stop@mR+1)^0,w,c
   866   0000A4  22DA               	addwfc	fsr2h,f,c
   867   0000A6  04DE               	decf	postinc2,w,c
   868   0000A8  A4D8               	btfss	status,2,c
   869   0000AA  EF59  F000         	goto	u961
   870   0000AE  EF5B  F000         	goto	u960
   871   0000B2                     u961:
   872   0000B2  EFAC  F000         	goto	l2008
   873   0000B6                     u960:
   874   0000B6                     
   875                           ;dc_motor.c: 91:         mL->brakemode = 1;
   876   0000B6  EE20 F002          	lfsr	2,2
   877   0000BA  501D               	movf	stop@mL^0,w,c
   878   0000BC  26D9               	addwf	fsr2l,f,c
   879   0000BE  501E               	movf	(stop@mL+1)^0,w,c
   880   0000C0  22DA               	addwfc	fsr2h,f,c
   881   0000C2  0E01               	movlw	1
   882   0000C4  6EDF               	movwf	indf2,c
   883                           
   884                           ;dc_motor.c: 92:         mR->brakemode = 1;
   885   0000C6  EE20 F002          	lfsr	2,2
   886   0000CA  501F               	movf	stop@mR^0,w,c
   887   0000CC  26D9               	addwf	fsr2l,f,c
   888   0000CE  5020               	movf	(stop@mR+1)^0,w,c
   889   0000D0  22DA               	addwfc	fsr2h,f,c
   890   0000D2  0E01               	movlw	1
   891   0000D4  6EDF               	movwf	indf2,c
   892                           
   893                           ;dc_motor.c: 94:         if(mL->power<0){mL->power=0;}
   894   0000D6  C01D  FFD9         	movff	stop@mL,fsr2l
   895   0000DA  C01E  FFDA         	movff	stop@mL+1,fsr2h
   896   0000DE  0E00               	movlw	0
   897   0000E0  BEDB               	btfsc	plusw2,7,c
   898   0000E2  EF77  F000         	goto	u970
   899   0000E6  EF75  F000         	goto	u971
   900   0000EA                     u971:
   901   0000EA  EF7D  F000         	goto	l1994
   902   0000EE                     u970:
   903   0000EE  C01D  FFD9         	movff	stop@mL,fsr2l
   904   0000F2  C01E  FFDA         	movff	stop@mL+1,fsr2h
   905   0000F6  0E00               	movlw	0
   906   0000F8  6EDF               	movwf	indf2,c
   907   0000FA                     l1994:
   908                           
   909                           ;dc_motor.c: 95:         if(mR->power<0){mR->power=0;}
   910   0000FA  C01F  FFD9         	movff	stop@mR,fsr2l
   911   0000FE  C020  FFDA         	movff	stop@mR+1,fsr2h
   912   000102  0E00               	movlw	0
   913   000104  BEDB               	btfsc	plusw2,7,c
   914   000106  EF89  F000         	goto	u980
   915   00010A  EF87  F000         	goto	u981
   916   00010E                     u981:
   917   00010E  EF8F  F000         	goto	l1998
   918   000112                     u980:
   919   000112  C01F  FFD9         	movff	stop@mR,fsr2l
   920   000116  C020  FFDA         	movff	stop@mR+1,fsr2h
   921   00011A  0E00               	movlw	0
   922   00011C  6EDF               	movwf	indf2,c
   923   00011E                     l1998:
   924                           
   925                           ;dc_motor.c: 97:         --mL->power;
   926   00011E  C01D  FFD9         	movff	stop@mL,fsr2l
   927   000122  C01E  FFDA         	movff	stop@mL+1,fsr2h
   928   000126  06DF               	decf	indf2,f,c
   929   000128                     
   930                           ;dc_motor.c: 98:         --mR->power;
   931   000128  C01F  FFD9         	movff	stop@mR,fsr2l
   932   00012C  C020  FFDA         	movff	stop@mR+1,fsr2h
   933   000130  06DF               	decf	indf2,f,c
   934   000132                     
   935                           ;dc_motor.c: 100:         setMotorPWM(mL);
   936   000132  C01D  F017         	movff	stop@mL,setMotorPWM@m
   937   000136  C01E  F018         	movff	stop@mL+1,setMotorPWM@m+1
   938   00013A  EC87  F001         	call	_setMotorPWM	;wreg free
   939   00013E                     
   940                           ;dc_motor.c: 101:         setMotorPWM(mR);
   941   00013E  C01F  F017         	movff	stop@mR,setMotorPWM@m
   942   000142  C020  F018         	movff	stop@mR+1,setMotorPWM@m+1
   943   000146  EC87  F001         	call	_setMotorPWM	;wreg free
   944   00014A                     
   945                           ;dc_motor.c: 102:         _delay((unsigned long)((10)*(64000000/4000.0)));
   946   00014A  0ED0               	movlw	208
   947   00014C  6E21               	movwf	??_stop^0,c
   948   00014E  0ECA               	movlw	202
   949   000150                     u1247:
   950   000150  2EE8               	decfsz	wreg,f,c
   951   000152  D7FE               	bra	u1247
   952   000154  2E21               	decfsz	??_stop^0,f,c
   953   000156  D7FC               	bra	u1247
   954   000158                     l2008:
   955                           
   956                           ;dc_motor.c: 105:     if(mL->direction==1 && mR->direction==0){
   957   000158  EE20 F001          	lfsr	2,1
   958   00015C  501D               	movf	stop@mL^0,w,c
   959   00015E  26D9               	addwf	fsr2l,f,c
   960   000160  501E               	movf	(stop@mL+1)^0,w,c
   961   000162  22DA               	addwfc	fsr2h,f,c
   962   000164  04DE               	decf	postinc2,w,c
   963   000166  A4D8               	btfss	status,2,c
   964   000168  EFB8  F000         	goto	u991
   965   00016C  EFBA  F000         	goto	u990
   966   000170                     u991:
   967   000170  EF19  F001         	goto	l2030
   968   000174                     u990:
   969   000174  EE20 F001          	lfsr	2,1
   970   000178  501F               	movf	stop@mR^0,w,c
   971   00017A  26D9               	addwf	fsr2l,f,c
   972   00017C  5020               	movf	(stop@mR+1)^0,w,c
   973   00017E  22DA               	addwfc	fsr2h,f,c
   974   000180  50DF               	movf	indf2,w,c
   975   000182  A4D8               	btfss	status,2,c
   976   000184  EFC6  F000         	goto	u1001
   977   000188  EFC8  F000         	goto	u1000
   978   00018C                     u1001:
   979   00018C  EF19  F001         	goto	l2030
   980   000190                     u1000:
   981   000190                     
   982                           ;dc_motor.c: 107:         mL->brakemode = 1;
   983   000190  EE20 F002          	lfsr	2,2
   984   000194  501D               	movf	stop@mL^0,w,c
   985   000196  26D9               	addwf	fsr2l,f,c
   986   000198  501E               	movf	(stop@mL+1)^0,w,c
   987   00019A  22DA               	addwfc	fsr2h,f,c
   988   00019C  0E01               	movlw	1
   989   00019E  6EDF               	movwf	indf2,c
   990                           
   991                           ;dc_motor.c: 108:         mR->brakemode = 1;
   992   0001A0  EE20 F002          	lfsr	2,2
   993   0001A4  501F               	movf	stop@mR^0,w,c
   994   0001A6  26D9               	addwf	fsr2l,f,c
   995   0001A8  5020               	movf	(stop@mR+1)^0,w,c
   996   0001AA  22DA               	addwfc	fsr2h,f,c
   997   0001AC  0E01               	movlw	1
   998   0001AE  6EDF               	movwf	indf2,c
   999                           
  1000                           ;dc_motor.c: 110:         if(mL->power<0){mL->power=0;}
  1001   0001B0  C01D  FFD9         	movff	stop@mL,fsr2l
  1002   0001B4  C01E  FFDA         	movff	stop@mL+1,fsr2h
  1003   0001B8  0E00               	movlw	0
  1004   0001BA  BEDB               	btfsc	plusw2,7,c
  1005   0001BC  EFE4  F000         	goto	u1010
  1006   0001C0  EFE2  F000         	goto	u1011
  1007   0001C4                     u1011:
  1008   0001C4  EFEA  F000         	goto	l2016
  1009   0001C8                     u1010:
  1010   0001C8  C01D  FFD9         	movff	stop@mL,fsr2l
  1011   0001CC  C01E  FFDA         	movff	stop@mL+1,fsr2h
  1012   0001D0  0E00               	movlw	0
  1013   0001D2  6EDF               	movwf	indf2,c
  1014   0001D4                     l2016:
  1015                           
  1016                           ;dc_motor.c: 111:         if(mR->power<0){mR->power=0;}
  1017   0001D4  C01F  FFD9         	movff	stop@mR,fsr2l
  1018   0001D8  C020  FFDA         	movff	stop@mR+1,fsr2h
  1019   0001DC  0E00               	movlw	0
  1020   0001DE  BEDB               	btfsc	plusw2,7,c
  1021   0001E0  EFF6  F000         	goto	u1020
  1022   0001E4  EFF4  F000         	goto	u1021
  1023   0001E8                     u1021:
  1024   0001E8  EFFC  F000         	goto	l2020
  1025   0001EC                     u1020:
  1026   0001EC  C01F  FFD9         	movff	stop@mR,fsr2l
  1027   0001F0  C020  FFDA         	movff	stop@mR+1,fsr2h
  1028   0001F4  0E00               	movlw	0
  1029   0001F6  6EDF               	movwf	indf2,c
  1030   0001F8                     l2020:
  1031                           
  1032                           ;dc_motor.c: 113:         --mL->power;
  1033   0001F8  C01D  FFD9         	movff	stop@mL,fsr2l
  1034   0001FC  C01E  FFDA         	movff	stop@mL+1,fsr2h
  1035   000200  06DF               	decf	indf2,f,c
  1036   000202                     
  1037                           ;dc_motor.c: 114:         --mR->power;
  1038   000202  C01F  FFD9         	movff	stop@mR,fsr2l
  1039   000206  C020  FFDA         	movff	stop@mR+1,fsr2h
  1040   00020A  06DF               	decf	indf2,f,c
  1041   00020C                     
  1042                           ;dc_motor.c: 116:         setMotorPWM(mL);
  1043   00020C  C01D  F017         	movff	stop@mL,setMotorPWM@m
  1044   000210  C01E  F018         	movff	stop@mL+1,setMotorPWM@m+1
  1045   000214  EC87  F001         	call	_setMotorPWM	;wreg free
  1046   000218                     
  1047                           ;dc_motor.c: 117:         setMotorPWM(mR);
  1048   000218  C01F  F017         	movff	stop@mR,setMotorPWM@m
  1049   00021C  C020  F018         	movff	stop@mR+1,setMotorPWM@m+1
  1050   000220  EC87  F001         	call	_setMotorPWM	;wreg free
  1051   000224                     
  1052                           ;dc_motor.c: 118:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1053   000224  0ED0               	movlw	208
  1054   000226  6E21               	movwf	??_stop^0,c
  1055   000228  0ECA               	movlw	202
  1056   00022A                     u1257:
  1057   00022A  2EE8               	decfsz	wreg,f,c
  1058   00022C  D7FE               	bra	u1257
  1059   00022E  2E21               	decfsz	??_stop^0,f,c
  1060   000230  D7FC               	bra	u1257
  1061   000232                     l2030:
  1062                           
  1063                           ;dc_motor.c: 121:     if(mL->direction==0 && mR->direction==1){
  1064   000232  EE20 F001          	lfsr	2,1
  1065   000236  501D               	movf	stop@mL^0,w,c
  1066   000238  26D9               	addwf	fsr2l,f,c
  1067   00023A  501E               	movf	(stop@mL+1)^0,w,c
  1068   00023C  22DA               	addwfc	fsr2h,f,c
  1069   00023E  50DF               	movf	indf2,w,c
  1070   000240  A4D8               	btfss	status,2,c
  1071   000242  EF25  F001         	goto	u1031
  1072   000246  EF27  F001         	goto	u1030
  1073   00024A                     u1031:
  1074   00024A  EF86  F001         	goto	l173
  1075   00024E                     u1030:
  1076   00024E  EE20 F001          	lfsr	2,1
  1077   000252  501F               	movf	stop@mR^0,w,c
  1078   000254  26D9               	addwf	fsr2l,f,c
  1079   000256  5020               	movf	(stop@mR+1)^0,w,c
  1080   000258  22DA               	addwfc	fsr2h,f,c
  1081   00025A  04DE               	decf	postinc2,w,c
  1082   00025C  A4D8               	btfss	status,2,c
  1083   00025E  EF33  F001         	goto	u1041
  1084   000262  EF35  F001         	goto	u1040
  1085   000266                     u1041:
  1086   000266  EF86  F001         	goto	l173
  1087   00026A                     u1040:
  1088   00026A                     
  1089                           ;dc_motor.c: 123:         mL->brakemode = 1;
  1090   00026A  EE20 F002          	lfsr	2,2
  1091   00026E  501D               	movf	stop@mL^0,w,c
  1092   000270  26D9               	addwf	fsr2l,f,c
  1093   000272  501E               	movf	(stop@mL+1)^0,w,c
  1094   000274  22DA               	addwfc	fsr2h,f,c
  1095   000276  0E01               	movlw	1
  1096   000278  6EDF               	movwf	indf2,c
  1097                           
  1098                           ;dc_motor.c: 124:         mR->brakemode = 1;
  1099   00027A  EE20 F002          	lfsr	2,2
  1100   00027E  501F               	movf	stop@mR^0,w,c
  1101   000280  26D9               	addwf	fsr2l,f,c
  1102   000282  5020               	movf	(stop@mR+1)^0,w,c
  1103   000284  22DA               	addwfc	fsr2h,f,c
  1104   000286  0E01               	movlw	1
  1105   000288  6EDF               	movwf	indf2,c
  1106                           
  1107                           ;dc_motor.c: 126:         if(mL->power<0){mL->power=0;}
  1108   00028A  C01D  FFD9         	movff	stop@mL,fsr2l
  1109   00028E  C01E  FFDA         	movff	stop@mL+1,fsr2h
  1110   000292  0E00               	movlw	0
  1111   000294  BEDB               	btfsc	plusw2,7,c
  1112   000296  EF51  F001         	goto	u1050
  1113   00029A  EF4F  F001         	goto	u1051
  1114   00029E                     u1051:
  1115   00029E  EF57  F001         	goto	l2038
  1116   0002A2                     u1050:
  1117   0002A2  C01D  FFD9         	movff	stop@mL,fsr2l
  1118   0002A6  C01E  FFDA         	movff	stop@mL+1,fsr2h
  1119   0002AA  0E00               	movlw	0
  1120   0002AC  6EDF               	movwf	indf2,c
  1121   0002AE                     l2038:
  1122                           
  1123                           ;dc_motor.c: 127:         if(mR->power<0){mR->power=0;}
  1124   0002AE  C01F  FFD9         	movff	stop@mR,fsr2l
  1125   0002B2  C020  FFDA         	movff	stop@mR+1,fsr2h
  1126   0002B6  0E00               	movlw	0
  1127   0002B8  BEDB               	btfsc	plusw2,7,c
  1128   0002BA  EF63  F001         	goto	u1060
  1129   0002BE  EF61  F001         	goto	u1061
  1130   0002C2                     u1061:
  1131   0002C2  EF69  F001         	goto	l2042
  1132   0002C6                     u1060:
  1133   0002C6  C01F  FFD9         	movff	stop@mR,fsr2l
  1134   0002CA  C020  FFDA         	movff	stop@mR+1,fsr2h
  1135   0002CE  0E00               	movlw	0
  1136   0002D0  6EDF               	movwf	indf2,c
  1137   0002D2                     l2042:
  1138                           
  1139                           ;dc_motor.c: 129:         --mL->power;
  1140   0002D2  C01D  FFD9         	movff	stop@mL,fsr2l
  1141   0002D6  C01E  FFDA         	movff	stop@mL+1,fsr2h
  1142   0002DA  06DF               	decf	indf2,f,c
  1143   0002DC                     
  1144                           ;dc_motor.c: 130:         --mR->power;
  1145   0002DC  C01F  FFD9         	movff	stop@mR,fsr2l
  1146   0002E0  C020  FFDA         	movff	stop@mR+1,fsr2h
  1147   0002E4  06DF               	decf	indf2,f,c
  1148   0002E6                     
  1149                           ;dc_motor.c: 132:         setMotorPWM(mL);
  1150   0002E6  C01D  F017         	movff	stop@mL,setMotorPWM@m
  1151   0002EA  C01E  F018         	movff	stop@mL+1,setMotorPWM@m+1
  1152   0002EE  EC87  F001         	call	_setMotorPWM	;wreg free
  1153   0002F2                     
  1154                           ;dc_motor.c: 133:         setMotorPWM(mR);
  1155   0002F2  C01F  F017         	movff	stop@mR,setMotorPWM@m
  1156   0002F6  C020  F018         	movff	stop@mR+1,setMotorPWM@m+1
  1157   0002FA  EC87  F001         	call	_setMotorPWM	;wreg free
  1158   0002FE                     
  1159                           ;dc_motor.c: 134:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1160   0002FE  0ED0               	movlw	208
  1161   000300  6E21               	movwf	??_stop^0,c
  1162   000302  0ECA               	movlw	202
  1163   000304                     u1267:
  1164   000304  2EE8               	decfsz	wreg,f,c
  1165   000306  D7FE               	bra	u1267
  1166   000308  2E21               	decfsz	??_stop^0,f,c
  1167   00030A  D7FC               	bra	u1267
  1168   00030C                     l173:
  1169   00030C  0012               	return		;funcret
  1170   00030E                     __end_of_stop:
  1171                           	callstack 0
  1172                           
  1173 ;; *************** function _fullSpeedBackwards *****************
  1174 ;; Defined at:
  1175 ;;		line 205 in file "dc_motor.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;  mL              2   28[COMRAM] PTR struct DC_motor
  1178 ;;		 -> main@motorL(9), 
  1179 ;;  mR              2   30[COMRAM] PTR struct DC_motor
  1180 ;;		 -> main@motorR(9), 
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;		None
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  1    wreg      void 
  1185 ;; Registers used:
  1186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1192 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1194 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1195 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1196 ;;Total ram usage:        6 bytes
  1197 ;; Hardware stack levels used: 1
  1198 ;; Hardware stack levels required when called: 5
  1199 ;; This function calls:
  1200 ;;		_setMotorPWM
  1201 ;; This function is called by:
  1202 ;;		_yellowInstructions
  1203 ;;		_pinkInstructions
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           	psect	text5
  1208   000550                     __ptext5:
  1209                           	callstack 0
  1210   000550                     _fullSpeedBackwards:
  1211                           	callstack 24
  1212   000550                     
  1213                           ;dc_motor.c: 208:     mL->direction = 0;
  1214   000550  EE20 F001          	lfsr	2,1
  1215   000554  501D               	movf	fullSpeedBackwards@mL^0,w,c
  1216   000556  26D9               	addwf	fsr2l,f,c
  1217   000558  501E               	movf	(fullSpeedBackwards@mL+1)^0,w,c
  1218   00055A  22DA               	addwfc	fsr2h,f,c
  1219   00055C  0E00               	movlw	0
  1220   00055E  6EDF               	movwf	indf2,c
  1221                           
  1222                           ;dc_motor.c: 209:     mL->brakemode = 0;
  1223   000560  EE20 F002          	lfsr	2,2
  1224   000564  501D               	movf	fullSpeedBackwards@mL^0,w,c
  1225   000566  26D9               	addwf	fsr2l,f,c
  1226   000568  501E               	movf	(fullSpeedBackwards@mL+1)^0,w,c
  1227   00056A  22DA               	addwfc	fsr2h,f,c
  1228   00056C  0E00               	movlw	0
  1229   00056E  6EDF               	movwf	indf2,c
  1230                           
  1231                           ;dc_motor.c: 211:     mR->direction = 0;
  1232   000570  EE20 F001          	lfsr	2,1
  1233   000574  501F               	movf	fullSpeedBackwards@mR^0,w,c
  1234   000576  26D9               	addwf	fsr2l,f,c
  1235   000578  5020               	movf	(fullSpeedBackwards@mR+1)^0,w,c
  1236   00057A  22DA               	addwfc	fsr2h,f,c
  1237   00057C  0E00               	movlw	0
  1238   00057E  6EDF               	movwf	indf2,c
  1239                           
  1240                           ;dc_motor.c: 212:     mR->brakemode = 0;
  1241   000580  EE20 F002          	lfsr	2,2
  1242   000584  501F               	movf	fullSpeedBackwards@mR^0,w,c
  1243   000586  26D9               	addwf	fsr2l,f,c
  1244   000588  5020               	movf	(fullSpeedBackwards@mR+1)^0,w,c
  1245   00058A  22DA               	addwfc	fsr2h,f,c
  1246   00058C  0E00               	movlw	0
  1247   00058E  6EDF               	movwf	indf2,c
  1248                           
  1249                           ;dc_motor.c: 215:     if(mL->power>75){mL->power=75;}
  1250   000590  C01D  FFD9         	movff	fullSpeedBackwards@mL,fsr2l
  1251   000594  C01E  FFDA         	movff	fullSpeedBackwards@mL+1,fsr2h
  1252   000598  50DF               	movf	indf2,w,c
  1253   00059A  0A80               	xorlw	128
  1254   00059C  0F34               	addlw	-204
  1255   00059E  A0D8               	btfss	status,0,c
  1256   0005A0  EFD4  F002         	goto	u1091
  1257   0005A4  EFD6  F002         	goto	u1090
  1258   0005A8                     u1091:
  1259   0005A8  EFDC  F002         	goto	l2074
  1260   0005AC                     u1090:
  1261   0005AC  C01D  FFD9         	movff	fullSpeedBackwards@mL,fsr2l
  1262   0005B0  C01E  FFDA         	movff	fullSpeedBackwards@mL+1,fsr2h
  1263   0005B4  0E4B               	movlw	75
  1264   0005B6  6EDF               	movwf	indf2,c
  1265   0005B8                     l2074:
  1266                           
  1267                           ;dc_motor.c: 216:     if(mR->power>75){mR->power=75;}
  1268   0005B8  C01F  FFD9         	movff	fullSpeedBackwards@mR,fsr2l
  1269   0005BC  C020  FFDA         	movff	fullSpeedBackwards@mR+1,fsr2h
  1270   0005C0  50DF               	movf	indf2,w,c
  1271   0005C2  0A80               	xorlw	128
  1272   0005C4  0F34               	addlw	-204
  1273   0005C6  A0D8               	btfss	status,0,c
  1274   0005C8  EFE8  F002         	goto	u1101
  1275   0005CC  EFEA  F002         	goto	u1100
  1276   0005D0                     u1101:
  1277   0005D0  EFF0  F002         	goto	l2078
  1278   0005D4                     u1100:
  1279   0005D4  C01F  FFD9         	movff	fullSpeedBackwards@mR,fsr2l
  1280   0005D8  C020  FFDA         	movff	fullSpeedBackwards@mR+1,fsr2h
  1281   0005DC  0E4B               	movlw	75
  1282   0005DE  6EDF               	movwf	indf2,c
  1283   0005E0                     l2078:
  1284                           
  1285                           ;dc_motor.c: 218:     ++mL->power;
  1286   0005E0  C01D  FFD9         	movff	fullSpeedBackwards@mL,fsr2l
  1287   0005E4  C01E  FFDA         	movff	fullSpeedBackwards@mL+1,fsr2h
  1288   0005E8  2ADF               	incf	indf2,f,c
  1289   0005EA                     
  1290                           ;dc_motor.c: 219:     ++mR->power;
  1291   0005EA  C01F  FFD9         	movff	fullSpeedBackwards@mR,fsr2l
  1292   0005EE  C020  FFDA         	movff	fullSpeedBackwards@mR+1,fsr2h
  1293   0005F2  2ADF               	incf	indf2,f,c
  1294   0005F4                     
  1295                           ;dc_motor.c: 221:     setMotorPWM(mL);
  1296   0005F4  C01D  F017         	movff	fullSpeedBackwards@mL,setMotorPWM@m
  1297   0005F8  C01E  F018         	movff	fullSpeedBackwards@mL+1,setMotorPWM@m+1
  1298   0005FC  EC87  F001         	call	_setMotorPWM	;wreg free
  1299   000600                     
  1300                           ;dc_motor.c: 222:     setMotorPWM(mR);
  1301   000600  C01F  F017         	movff	fullSpeedBackwards@mR,setMotorPWM@m
  1302   000604  C020  F018         	movff	fullSpeedBackwards@mR+1,setMotorPWM@m+1
  1303   000608  EC87  F001         	call	_setMotorPWM	;wreg free
  1304   00060C                     
  1305                           ;dc_motor.c: 223:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1306   00060C  0E05               	movlw	5
  1307   00060E  6E22               	movwf	(??_fullSpeedBackwards+1)^0,c
  1308   000610  0E0F               	movlw	15
  1309   000612  6E21               	movwf	??_fullSpeedBackwards^0,c
  1310   000614  0EF1               	movlw	241
  1311   000616                     u1277:
  1312   000616  2EE8               	decfsz	wreg,f,c
  1313   000618  D7FE               	bra	u1277
  1314   00061A  2E21               	decfsz	??_fullSpeedBackwards^0,f,c
  1315   00061C  D7FC               	bra	u1277
  1316   00061E  2E22               	decfsz	(??_fullSpeedBackwards+1)^0,f,c
  1317   000620  D7FA               	bra	u1277
  1318   000622  F000               	nop	
  1319   000624  0012               	return		;funcret
  1320   000626                     __end_of_fullSpeedBackwards:
  1321                           	callstack 0
  1322                           
  1323 ;; *************** function _setMotorPWM *****************
  1324 ;; Defined at:
  1325 ;;		line 64 in file "dc_motor.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;  m               2   22[COMRAM] PTR struct DC_motor
  1328 ;;		 -> main@motorR(9), main@motorL(9), 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  negDuty         1   27[COMRAM] unsigned char 
  1331 ;;  posDuty         1   26[COMRAM] unsigned char 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      void 
  1334 ;; Registers used:
  1335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1341 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1342 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1343 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1344 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1345 ;;Total ram usage:        6 bytes
  1346 ;; Hardware stack levels used: 1
  1347 ;; Hardware stack levels required when called: 4
  1348 ;; This function calls:
  1349 ;;		___lwdiv
  1350 ;;		___wmul
  1351 ;; This function is called by:
  1352 ;;		_stop
  1353 ;;		_turnRight
  1354 ;;		_fullSpeedBackwards
  1355 ;;		_turnLeft
  1356 ;;		_fullSpeedAhead
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           	psect	text6
  1361   00030E                     __ptext6:
  1362                           	callstack 0
  1363   00030E                     _setMotorPWM:
  1364                           	callstack 23
  1365   00030E                     
  1366                           ;dc_motor.c: 64: void setMotorPWM(DC_motor *m);dc_motor.c: 65: {;dc_motor.c: 66:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 68:     if(m->brakemode) {
  1367   00030E  EE20 F002          	lfsr	2,2
  1368   000312  5017               	movf	setMotorPWM@m^0,w,c
  1369   000314  26D9               	addwf	fsr2l,f,c
  1370   000316  5018               	movf	(setMotorPWM@m+1)^0,w,c
  1371   000318  22DA               	addwfc	fsr2h,f,c
  1372   00031A  50DF               	movf	indf2,w,c
  1373   00031C  B4D8               	btfsc	status,2,c
  1374   00031E  EF93  F001         	goto	u931
  1375   000322  EF95  F001         	goto	u930
  1376   000326                     u931:
  1377   000326  EFC9  F001         	goto	l1976
  1378   00032A                     u930:
  1379   00032A                     
  1380                           ;dc_motor.c: 69:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1381   00032A  C017  FFD9         	movff	setMotorPWM@m,fsr2l
  1382   00032E  C018  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1383   000332  50DF               	movf	indf2,w,c
  1384   000334  6E0A               	movwf	___wmul@multiplier^0,c
  1385   000336  6A0B               	clrf	(___wmul@multiplier+1)^0,c
  1386   000338  BE0A               	btfsc	___wmul@multiplier^0,7,c
  1387   00033A  060B               	decf	(___wmul@multiplier+1)^0,f,c
  1388   00033C  EE20 F003          	lfsr	2,3
  1389   000340  5017               	movf	setMotorPWM@m^0,w,c
  1390   000342  26D9               	addwf	fsr2l,f,c
  1391   000344  5018               	movf	(setMotorPWM@m+1)^0,w,c
  1392   000346  22DA               	addwfc	fsr2h,f,c
  1393   000348  CFDE F00C          	movff	postinc2,___wmul@multiplicand
  1394   00034C  CFDD F00D          	movff	postdec2,___wmul@multiplicand+1
  1395   000350  EC80  F004         	call	___wmul	;wreg free
  1396   000354  C00A  F010         	movff	?___wmul,___lwdiv@dividend
  1397   000358  C00B  F011         	movff	?___wmul+1,___lwdiv@dividend+1
  1398   00035C  0E00               	movlw	0
  1399   00035E  6E13               	movwf	(___lwdiv@divisor+1)^0,c
  1400   000360  0E64               	movlw	100
  1401   000362  6E12               	movwf	___lwdiv@divisor^0,c
  1402   000364  EC9E  F003         	call	___lwdiv	;wreg free
  1403   000368  EE20 F003          	lfsr	2,3
  1404   00036C  5017               	movf	setMotorPWM@m^0,w,c
  1405   00036E  26D9               	addwf	fsr2l,f,c
  1406   000370  5018               	movf	(setMotorPWM@m+1)^0,w,c
  1407   000372  22DA               	addwfc	fsr2h,f,c
  1408   000374  50DF               	movf	indf2,w,c
  1409   000376  6E19               	movwf	??_setMotorPWM^0,c
  1410   000378  5010               	movf	?___lwdiv^0,w,c
  1411   00037A  5C19               	subwf	??_setMotorPWM^0,w,c
  1412   00037C  6E1B               	movwf	setMotorPWM@posDuty^0,c
  1413   00037E                     
  1414                           ;dc_motor.c: 70:         negDuty=m->PWMperiod;
  1415   00037E  EE20 F003          	lfsr	2,3
  1416   000382  5017               	movf	setMotorPWM@m^0,w,c
  1417   000384  26D9               	addwf	fsr2l,f,c
  1418   000386  5018               	movf	(setMotorPWM@m+1)^0,w,c
  1419   000388  22DA               	addwfc	fsr2h,f,c
  1420   00038A  50DF               	movf	indf2,w,c
  1421   00038C  6E1C               	movwf	setMotorPWM@negDuty^0,c
  1422                           
  1423                           ;dc_motor.c: 71:     }
  1424   00038E  EFEC  F001         	goto	l1980
  1425   000392                     l1976:
  1426                           
  1427                           ;dc_motor.c: 73:         posDuty=0;
  1428   000392  0E00               	movlw	0
  1429   000394  6E1B               	movwf	setMotorPWM@posDuty^0,c
  1430   000396                     
  1431                           ;dc_motor.c: 74:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1432   000396  C017  FFD9         	movff	setMotorPWM@m,fsr2l
  1433   00039A  C018  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1434   00039E  50DF               	movf	indf2,w,c
  1435   0003A0  6E0A               	movwf	___wmul@multiplier^0,c
  1436   0003A2  6A0B               	clrf	(___wmul@multiplier+1)^0,c
  1437   0003A4  BE0A               	btfsc	___wmul@multiplier^0,7,c
  1438   0003A6  060B               	decf	(___wmul@multiplier+1)^0,f,c
  1439   0003A8  EE20 F003          	lfsr	2,3
  1440   0003AC  5017               	movf	setMotorPWM@m^0,w,c
  1441   0003AE  26D9               	addwf	fsr2l,f,c
  1442   0003B0  5018               	movf	(setMotorPWM@m+1)^0,w,c
  1443   0003B2  22DA               	addwfc	fsr2h,f,c
  1444   0003B4  CFDE F00C          	movff	postinc2,___wmul@multiplicand
  1445   0003B8  CFDD F00D          	movff	postdec2,___wmul@multiplicand+1
  1446   0003BC  EC80  F004         	call	___wmul	;wreg free
  1447   0003C0  C00A  F010         	movff	?___wmul,___lwdiv@dividend
  1448   0003C4  C00B  F011         	movff	?___wmul+1,___lwdiv@dividend+1
  1449   0003C8  0E00               	movlw	0
  1450   0003CA  6E13               	movwf	(___lwdiv@divisor+1)^0,c
  1451   0003CC  0E64               	movlw	100
  1452   0003CE  6E12               	movwf	___lwdiv@divisor^0,c
  1453   0003D0  EC9E  F003         	call	___lwdiv	;wreg free
  1454   0003D4  5010               	movf	?___lwdiv^0,w,c
  1455   0003D6  6E1C               	movwf	setMotorPWM@negDuty^0,c
  1456   0003D8                     l1980:
  1457                           
  1458                           ;dc_motor.c: 77:     if (m->direction) {
  1459   0003D8  EE20 F001          	lfsr	2,1
  1460   0003DC  5017               	movf	setMotorPWM@m^0,w,c
  1461   0003DE  26D9               	addwf	fsr2l,f,c
  1462   0003E0  5018               	movf	(setMotorPWM@m+1)^0,w,c
  1463   0003E2  22DA               	addwfc	fsr2h,f,c
  1464   0003E4  50DF               	movf	indf2,w,c
  1465   0003E6  B4D8               	btfsc	status,2,c
  1466   0003E8  EFF8  F001         	goto	u941
  1467   0003EC  EFFA  F001         	goto	u940
  1468   0003F0                     u941:
  1469   0003F0  EF1C  F002         	goto	l1984
  1470   0003F4                     u940:
  1471   0003F4                     
  1472                           ;dc_motor.c: 78:         *(m->posDutyHighByte)=posDuty;
  1473   0003F4  EE20 F005          	lfsr	2,5
  1474   0003F8  5017               	movf	setMotorPWM@m^0,w,c
  1475   0003FA  26D9               	addwf	fsr2l,f,c
  1476   0003FC  5018               	movf	(setMotorPWM@m+1)^0,w,c
  1477   0003FE  22DA               	addwfc	fsr2h,f,c
  1478   000400  CFDE F019          	movff	postinc2,??_setMotorPWM
  1479   000404  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  1480   000408  C019  FFD9         	movff	??_setMotorPWM,fsr2l
  1481   00040C  C01A  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1482   000410  C01B  FFDF         	movff	setMotorPWM@posDuty,indf2
  1483                           
  1484                           ;dc_motor.c: 79:         *(m->negDutyHighByte)=negDuty;
  1485   000414  EE20 F007          	lfsr	2,7
  1486   000418  5017               	movf	setMotorPWM@m^0,w,c
  1487   00041A  26D9               	addwf	fsr2l,f,c
  1488   00041C  5018               	movf	(setMotorPWM@m+1)^0,w,c
  1489   00041E  22DA               	addwfc	fsr2h,f,c
  1490   000420  CFDE F019          	movff	postinc2,??_setMotorPWM
  1491   000424  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  1492   000428  C019  FFD9         	movff	??_setMotorPWM,fsr2l
  1493   00042C  C01A  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1494   000430  C01C  FFDF         	movff	setMotorPWM@negDuty,indf2
  1495                           
  1496                           ;dc_motor.c: 80:     } else {
  1497   000434  EF3C  F002         	goto	l161
  1498   000438                     l1984:
  1499                           
  1500                           ;dc_motor.c: 81:         *(m->posDutyHighByte)=negDuty;
  1501   000438  EE20 F005          	lfsr	2,5
  1502   00043C  5017               	movf	setMotorPWM@m^0,w,c
  1503   00043E  26D9               	addwf	fsr2l,f,c
  1504   000440  5018               	movf	(setMotorPWM@m+1)^0,w,c
  1505   000442  22DA               	addwfc	fsr2h,f,c
  1506   000444  CFDE F019          	movff	postinc2,??_setMotorPWM
  1507   000448  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  1508   00044C  C019  FFD9         	movff	??_setMotorPWM,fsr2l
  1509   000450  C01A  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1510   000454  C01C  FFDF         	movff	setMotorPWM@negDuty,indf2
  1511                           
  1512                           ;dc_motor.c: 82:         *(m->negDutyHighByte)=posDuty;
  1513   000458  EE20 F007          	lfsr	2,7
  1514   00045C  5017               	movf	setMotorPWM@m^0,w,c
  1515   00045E  26D9               	addwf	fsr2l,f,c
  1516   000460  5018               	movf	(setMotorPWM@m+1)^0,w,c
  1517   000462  22DA               	addwfc	fsr2h,f,c
  1518   000464  CFDE F019          	movff	postinc2,??_setMotorPWM
  1519   000468  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  1520   00046C  C019  FFD9         	movff	??_setMotorPWM,fsr2l
  1521   000470  C01A  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1522   000474  C01B  FFDF         	movff	setMotorPWM@posDuty,indf2
  1523   000478                     l161:
  1524   000478  0012               	return		;funcret
  1525   00047A                     __end_of_setMotorPWM:
  1526                           	callstack 0
  1527                           
  1528 ;; *************** function ___wmul *****************
  1529 ;; Defined at:
  1530 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  multiplier      2    9[COMRAM] unsigned int 
  1533 ;;  multiplicand    2   11[COMRAM] unsigned int 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  product         2   13[COMRAM] unsigned int 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  2    9[COMRAM] unsigned int 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2, status,0, prodl, prodh
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1545 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1546 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1548 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1549 ;;Total ram usage:        6 bytes
  1550 ;; Hardware stack levels used: 1
  1551 ;; Hardware stack levels required when called: 3
  1552 ;; This function calls:
  1553 ;;		Nothing
  1554 ;; This function is called by:
  1555 ;;		_setMotorPWM
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text7
  1560   000900                     __ptext7:
  1561                           	callstack 0
  1562   000900                     ___wmul:
  1563                           	callstack 23
  1564   000900  500A               	movf	___wmul@multiplier^0,w,c
  1565   000902  020C               	mulwf	___wmul@multiplicand^0,c
  1566   000904  CFF3 F00E          	movff	prodl,___wmul@product
  1567   000908  CFF4 F00F          	movff	prodh,___wmul@product+1
  1568   00090C  500A               	movf	___wmul@multiplier^0,w,c
  1569   00090E  020D               	mulwf	(___wmul@multiplicand+1)^0,c
  1570   000910  50F3               	movf	243,w,c
  1571   000912  260F               	addwf	(___wmul@product+1)^0,f,c
  1572   000914  500B               	movf	(___wmul@multiplier+1)^0,w,c
  1573   000916  020C               	mulwf	___wmul@multiplicand^0,c
  1574   000918  50F3               	movf	243,w,c
  1575   00091A  260F               	addwf	(___wmul@product+1)^0,f,c
  1576   00091C  C00E  F00A         	movff	___wmul@product,?___wmul
  1577   000920  C00F  F00B         	movff	___wmul@product+1,?___wmul+1
  1578   000924  0012               	return		;funcret
  1579   000926                     __end_of___wmul:
  1580                           	callstack 0
  1581                           
  1582 ;; *************** function ___lwdiv *****************
  1583 ;; Defined at:
  1584 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;  dividend        2   15[COMRAM] unsigned int 
  1587 ;;  divisor         2   17[COMRAM] unsigned int 
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;  quotient        2   20[COMRAM] unsigned int 
  1590 ;;  counter         1   19[COMRAM] unsigned char 
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  2   15[COMRAM] unsigned int 
  1593 ;; Registers used:
  1594 ;;		wreg, status,2, status,0
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1600 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1601 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1603 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1604 ;;Total ram usage:        7 bytes
  1605 ;; Hardware stack levels used: 1
  1606 ;; Hardware stack levels required when called: 3
  1607 ;; This function calls:
  1608 ;;		Nothing
  1609 ;; This function is called by:
  1610 ;;		_setMotorPWM
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text8
  1615   00073C                     __ptext8:
  1616                           	callstack 0
  1617   00073C                     ___lwdiv:
  1618                           	callstack 23
  1619   00073C  0E00               	movlw	0
  1620   00073E  6E16               	movwf	(___lwdiv@quotient+1)^0,c
  1621   000740  0E00               	movlw	0
  1622   000742  6E15               	movwf	___lwdiv@quotient^0,c
  1623   000744  5012               	movf	___lwdiv@divisor^0,w,c
  1624   000746  1013               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1625   000748  B4D8               	btfsc	status,2,c
  1626   00074A  EFA9  F003         	goto	u901
  1627   00074E  EFAB  F003         	goto	u900
  1628   000752                     u901:
  1629   000752  EFD3  F003         	goto	l922
  1630   000756                     u900:
  1631   000756  0E01               	movlw	1
  1632   000758  6E14               	movwf	___lwdiv@counter^0,c
  1633   00075A  EFB3  F003         	goto	l1956
  1634   00075E                     l1954:
  1635   00075E  90D8               	bcf	status,0,c
  1636   000760  3612               	rlcf	___lwdiv@divisor^0,f,c
  1637   000762  3613               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1638   000764  2A14               	incf	___lwdiv@counter^0,f,c
  1639   000766                     l1956:
  1640   000766  AE13               	btfss	(___lwdiv@divisor+1)^0,7,c
  1641   000768  EFB8  F003         	goto	u911
  1642   00076C  EFBA  F003         	goto	u910
  1643   000770                     u911:
  1644   000770  EFAF  F003         	goto	l1954
  1645   000774                     u910:
  1646   000774                     l1958:
  1647   000774  90D8               	bcf	status,0,c
  1648   000776  3615               	rlcf	___lwdiv@quotient^0,f,c
  1649   000778  3616               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1650   00077A  5012               	movf	___lwdiv@divisor^0,w,c
  1651   00077C  5C10               	subwf	___lwdiv@dividend^0,w,c
  1652   00077E  5013               	movf	(___lwdiv@divisor+1)^0,w,c
  1653   000780  5811               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1654   000782  A0D8               	btfss	status,0,c
  1655   000784  EFC6  F003         	goto	u921
  1656   000788  EFC8  F003         	goto	u920
  1657   00078C                     u921:
  1658   00078C  EFCD  F003         	goto	l1966
  1659   000790                     u920:
  1660   000790  5012               	movf	___lwdiv@divisor^0,w,c
  1661   000792  5E10               	subwf	___lwdiv@dividend^0,f,c
  1662   000794  5013               	movf	(___lwdiv@divisor+1)^0,w,c
  1663   000796  5A11               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1664   000798  8015               	bsf	___lwdiv@quotient^0,0,c
  1665   00079A                     l1966:
  1666   00079A  90D8               	bcf	status,0,c
  1667   00079C  3213               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1668   00079E  3212               	rrcf	___lwdiv@divisor^0,f,c
  1669   0007A0  2E14               	decfsz	___lwdiv@counter^0,f,c
  1670   0007A2  EFBA  F003         	goto	l1958
  1671   0007A6                     l922:
  1672   0007A6  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  1673   0007AA  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1674   0007AE  0012               	return		;funcret
  1675   0007B0                     __end_of___lwdiv:
  1676                           	callstack 0
  1677                           
  1678 ;; *************** function _initDCmotorsPWM *****************
  1679 ;; Defined at:
  1680 ;;		line 5 in file "dc_motor.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;  PWMperiod       2    9[COMRAM] unsigned int 
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;		None
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  1    wreg      void 
  1687 ;; Registers used:
  1688 ;;		wreg, status,2
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1694 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1697 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1698 ;;Total ram usage:        2 bytes
  1699 ;; Hardware stack levels used: 1
  1700 ;; Hardware stack levels required when called: 3
  1701 ;; This function calls:
  1702 ;;		Nothing
  1703 ;; This function is called by:
  1704 ;;		_main
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           	psect	text9
  1709   000626                     __ptext9:
  1710                           	callstack 0
  1711   000626                     _initDCmotorsPWM:
  1712                           	callstack 27
  1713   000626                     
  1714                           ;dc_motor.c: 7:     LATEbits.LATE2 = 0;
  1715   000626  947D               	bcf	125,2,c	;volatile
  1716                           
  1717                           ;dc_motor.c: 8:     TRISEbits.TRISE2 = 0;
  1718   000628  9485               	bcf	133,2,c	;volatile
  1719                           
  1720                           ;dc_motor.c: 9:     LATEbits.LATE4 = 0;
  1721   00062A  987D               	bcf	125,4,c	;volatile
  1722                           
  1723                           ;dc_motor.c: 10:     TRISEbits.TRISE4 = 0;
  1724   00062C  9885               	bcf	133,4,c	;volatile
  1725                           
  1726                           ;dc_motor.c: 11:     LATCbits.LATC7 = 0;
  1727   00062E  9E7B               	bcf	123,7,c	;volatile
  1728                           
  1729                           ;dc_motor.c: 12:     TRISCbits.TRISC7 = 0;
  1730   000630  9E83               	bcf	131,7,c	;volatile
  1731                           
  1732                           ;dc_motor.c: 13:     LATGbits.LATG6 = 0;
  1733   000632  9C7F               	bcf	127,6,c	;volatile
  1734                           
  1735                           ;dc_motor.c: 14:     TRISGbits.TRISG6 = 0;
  1736   000634  9C87               	bcf	135,6,c	;volatile
  1737   000636                     
  1738                           ;dc_motor.c: 17:     RE2PPS=0x05;
  1739   000636  0E05               	movlw	5
  1740   000638  010E               	movlb	14	; () banked
  1741   00063A  6F74               	movwf	116,b	;volatile
  1742                           
  1743                           ;dc_motor.c: 18:     RE4PPS=0x06;
  1744   00063C  0E06               	movlw	6
  1745   00063E  6F76               	movwf	118,b	;volatile
  1746                           
  1747                           ;dc_motor.c: 19:     RC7PPS=0x07;
  1748   000640  0E07               	movlw	7
  1749   000642  6F69               	movwf	105,b	;volatile
  1750                           
  1751                           ;dc_motor.c: 20:     RG6PPS=0x08;
  1752   000644  0E08               	movlw	8
  1753   000646  6F88               	movwf	136,b	;volatile
  1754                           
  1755                           ;dc_motor.c: 23:     T2CONbits.CKPS=0b100;
  1756   000648  50BD               	movf	189,w,c	;volatile
  1757   00064A  0B8F               	andlw	-113
  1758   00064C  0940               	iorlw	64
  1759   00064E  6EBD               	movwf	189,c	;volatile
  1760                           
  1761                           ;dc_motor.c: 24:     T2HLTbits.MODE=0b00000;
  1762   000650  0EE0               	movlw	-32
  1763   000652  16BE               	andwf	190,f,c	;volatile
  1764                           
  1765                           ;dc_motor.c: 25:     T2CLKCONbits.CS=0b0001;
  1766   000654  50BF               	movf	191,w,c	;volatile
  1767   000656  0BF0               	andlw	-16
  1768   000658  0901               	iorlw	1
  1769   00065A  6EBF               	movwf	191,c	;volatile
  1770   00065C                     
  1771                           ; BSR set to: 14
  1772                           ;dc_motor.c: 29:     T2PR=PWMperiod;
  1773   00065C  C00A  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1774   000660                     
  1775                           ; BSR set to: 14
  1776                           ;dc_motor.c: 30:     T2CONbits.ON=1;
  1777   000660  8EBD               	bsf	189,7,c	;volatile
  1778                           
  1779                           ;dc_motor.c: 34:     CCPR1H=0;
  1780   000662  0E00               	movlw	0
  1781   000664  6EAA               	movwf	170,c	;volatile
  1782                           
  1783                           ;dc_motor.c: 35:     CCPR2H=0;
  1784   000666  0E00               	movlw	0
  1785   000668  6EA6               	movwf	166,c	;volatile
  1786                           
  1787                           ;dc_motor.c: 36:     CCPR3H=0;
  1788   00066A  0E00               	movlw	0
  1789   00066C  010F               	movlb	15	; () banked
  1790   00066E  6F25               	movwf	37,b	;volatile
  1791                           
  1792                           ;dc_motor.c: 37:     CCPR4H=0;
  1793   000670  0E00               	movlw	0
  1794   000672  6F21               	movwf	33,b	;volatile
  1795                           
  1796                           ;dc_motor.c: 40:     CCPTMRS0bits.C1TSEL=0;
  1797   000674  0EFC               	movlw	-4
  1798   000676  16AD               	andwf	173,f,c	;volatile
  1799                           
  1800                           ;dc_motor.c: 41:     CCPTMRS0bits.C2TSEL=0;
  1801   000678  0EF3               	movlw	-13
  1802   00067A  16AD               	andwf	173,f,c	;volatile
  1803                           
  1804                           ;dc_motor.c: 42:     CCPTMRS0bits.C3TSEL=0;
  1805   00067C  0ECF               	movlw	-49
  1806   00067E  16AD               	andwf	173,f,c	;volatile
  1807                           
  1808                           ;dc_motor.c: 43:     CCPTMRS0bits.C4TSEL=0;
  1809   000680  0E3F               	movlw	-193
  1810   000682  16AD               	andwf	173,f,c	;volatile
  1811   000684                     
  1812                           ; BSR set to: 15
  1813                           ;dc_motor.c: 46:     CCP1CONbits.FMT=1;
  1814   000684  88AB               	bsf	171,4,c	;volatile
  1815                           
  1816                           ;dc_motor.c: 47:     CCP1CONbits.CCP1MODE=0b1100;
  1817   000686  50AB               	movf	171,w,c	;volatile
  1818   000688  0BF0               	andlw	-16
  1819   00068A  090C               	iorlw	12
  1820   00068C  6EAB               	movwf	171,c	;volatile
  1821   00068E                     
  1822                           ; BSR set to: 15
  1823                           ;dc_motor.c: 48:     CCP1CONbits.EN=1;
  1824   00068E  8EAB               	bsf	171,7,c	;volatile
  1825   000690                     
  1826                           ; BSR set to: 15
  1827                           ;dc_motor.c: 50:     CCP2CONbits.FMT=1;
  1828   000690  88A7               	bsf	167,4,c	;volatile
  1829                           
  1830                           ;dc_motor.c: 51:     CCP2CONbits.CCP2MODE=0b1100;
  1831   000692  50A7               	movf	167,w,c	;volatile
  1832   000694  0BF0               	andlw	-16
  1833   000696  090C               	iorlw	12
  1834   000698  6EA7               	movwf	167,c	;volatile
  1835   00069A                     
  1836                           ; BSR set to: 15
  1837                           ;dc_motor.c: 52:     CCP2CONbits.EN=1;
  1838   00069A  8EA7               	bsf	167,7,c	;volatile
  1839   00069C                     
  1840                           ; BSR set to: 15
  1841                           ;dc_motor.c: 54:     CCP3CONbits.FMT=1;
  1842   00069C  8926               	bsf	38,4,b	;volatile
  1843                           
  1844                           ;dc_motor.c: 55:     CCP3CONbits.CCP3MODE=0b1100;
  1845   00069E  5126               	movf	38,w,b	;volatile
  1846   0006A0  0BF0               	andlw	-16
  1847   0006A2  090C               	iorlw	12
  1848   0006A4  6F26               	movwf	38,b	;volatile
  1849   0006A6                     
  1850                           ; BSR set to: 15
  1851                           ;dc_motor.c: 56:     CCP3CONbits.EN=1;
  1852   0006A6  8F26               	bsf	38,7,b	;volatile
  1853   0006A8                     
  1854                           ; BSR set to: 15
  1855                           ;dc_motor.c: 58:     CCP4CONbits.FMT=1;
  1856   0006A8  8922               	bsf	34,4,b	;volatile
  1857                           
  1858                           ;dc_motor.c: 59:     CCP4CONbits.CCP4MODE=0b1100;
  1859   0006AA  5122               	movf	34,w,b	;volatile
  1860   0006AC  0BF0               	andlw	-16
  1861   0006AE  090C               	iorlw	12
  1862   0006B0  6F22               	movwf	34,b	;volatile
  1863   0006B2                     
  1864                           ; BSR set to: 15
  1865                           ;dc_motor.c: 60:     CCP4CONbits.EN=1;
  1866   0006B2  8F22               	bsf	34,7,b	;volatile
  1867   0006B4                     
  1868                           ; BSR set to: 15
  1869   0006B4  0012               	return		;funcret
  1870   0006B6                     __end_of_initDCmotorsPWM:
  1871                           	callstack 0
  1872                           
  1873 ;; *************** function _LowISR *****************
  1874 ;; Defined at:
  1875 ;;		line 34 in file "interrupts.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;		None
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  1    wreg      void 
  1882 ;; Registers used:
  1883 ;;		wreg, status,2, status,0
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1891 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1892 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1893 ;;Total ram usage:        4 bytes
  1894 ;; Hardware stack levels used: 1
  1895 ;; Hardware stack levels required when called: 2
  1896 ;; This function calls:
  1897 ;;		Nothing
  1898 ;; This function is called by:
  1899 ;;		Interrupt level 1
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	intcodelo
  1904   000018                     __pintcodelo:
  1905                           	callstack 0
  1906   000018                     _LowISR:
  1907                           	callstack 23
  1908                           
  1909                           ; BSR set to: 15
  1910                           ;incstack = 0
  1911   000018  8049               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  1912   00001A  CFD8 F007          	movff	status,??_LowISR+1
  1913   00001E  CFE8 F008          	movff	wreg,??_LowISR+2
  1914   000022  CFE0 F009          	movff	bsr,??_LowISR+3
  1915   000026                     
  1916                           ;interrupts.c: 37:     if(PIR0bits.TMR0IF){
  1917   000026  010E               	movlb	14	; () banked
  1918   000028  AB33               	btfss	51,5,b	;volatile
  1919   00002A  EF19  F000         	goto	i1u42_21
  1920   00002E  EF1B  F000         	goto	i1u42_20
  1921   000032                     i1u42_21:
  1922   000032  EF35  F000         	goto	i1l295
  1923   000036                     i1u42_20:
  1924   000036                     
  1925                           ; BSR set to: 14
  1926                           ;interrupts.c: 38:         LATHbits.LATH3 = !LATHbits.LATH3;
  1927   000036  A680               	btfss	128,3,c	;volatile
  1928   000038  EF20  F000         	goto	i1u43_21
  1929   00003C  EF24  F000         	goto	i1u43_20
  1930   000040                     i1u43_21:
  1931   000040  6A06               	clrf	??_LowISR^0,c
  1932   000042  2A06               	incf	??_LowISR^0,f,c
  1933   000044  EF25  F000         	goto	i1u44_28
  1934   000048                     i1u43_20:
  1935   000048  6A06               	clrf	??_LowISR^0,c
  1936   00004A                     i1u44_28:
  1937   00004A  4606               	rlncf	??_LowISR^0,f,c
  1938   00004C  4606               	rlncf	??_LowISR^0,f,c
  1939   00004E  4606               	rlncf	??_LowISR^0,f,c
  1940   000050  5080               	movf	128,w,c	;volatile
  1941   000052  1806               	xorwf	??_LowISR^0,w,c
  1942   000054  0BF7               	andlw	-9
  1943   000056  1806               	xorwf	??_LowISR^0,w,c
  1944   000058  6E80               	movwf	128,c	;volatile
  1945   00005A                     
  1946                           ;interrupts.c: 39:         TMR0H = 0b11000010;
  1947   00005A  0EC2               	movlw	194
  1948   00005C  6ED4               	movwf	212,c	;volatile
  1949   00005E                     
  1950                           ;interrupts.c: 40:         TMR0L = 0b11110110;
  1951   00005E  0EF6               	movlw	246
  1952   000060  6ED3               	movwf	211,c	;volatile
  1953   000062                     
  1954                           ;interrupts.c: 41:         tmr_ovf = 1;
  1955   000062  0E01               	movlw	1
  1956   000064  6E44               	movwf	_tmr_ovf^0,c
  1957   000066                     
  1958                           ;interrupts.c: 42:         PIR0bits.TMR0IF=0;
  1959   000066  010E               	movlb	14	; () banked
  1960   000068  9B33               	bcf	51,5,b	;volatile
  1961   00006A                     i1l295:
  1962                           
  1963                           ; BSR set to: 14
  1964   00006A  C009  FFE0         	movff	??_LowISR+3,bsr
  1965   00006E  C008  FFE8         	movff	??_LowISR+2,wreg
  1966   000072  C007  FFD8         	movff	??_LowISR+1,status
  1967   000076  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1968   000078  0010               	retfie	
  1969   00007A                     __end_of_LowISR:
  1970                           	callstack 0
  1971                           
  1972 ;; *************** function _HighISR *****************
  1973 ;; Defined at:
  1974 ;;		line 48 in file "interrupts.c"
  1975 ;; Parameters:    Size  Location     Type
  1976 ;;		None
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;  a               1    4[COMRAM] unsigned char 
  1979 ;; Return value:  Size  Location     Type
  1980 ;;                  1    wreg      void 
  1981 ;; Registers used:
  1982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1989 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1990 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1991 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1992 ;;Total ram usage:        3 bytes
  1993 ;; Hardware stack levels used: 1
  1994 ;; Hardware stack levels required when called: 1
  1995 ;; This function calls:
  1996 ;;		_getCharFromTxBuf
  1997 ;;		_isDataInTxBuf
  1998 ;;		_putCharToRxBuf
  1999 ;; This function is called by:
  2000 ;;		Interrupt level 2
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           	psect	intcode
  2005   000008                     __pintcode:
  2006                           	callstack 0
  2007   000008                     _HighISR:
  2008                           	callstack 23
  2009                           
  2010                           ; BSR set to: 14
  2011                           ;incstack = 0
  2012   000008  8249               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2013   00000A  EFD8  F003         	goto	int_func
  2014                           
  2015                           	psect	intcode_body
  2016   0007B0                     __pintcode_body:
  2017                           	callstack 23
  2018   0007B0                     int_func:
  2019                           	callstack 23
  2020   0007B0  CFD9 F003          	movff	fsr2l,??_HighISR
  2021   0007B4  CFDA F004          	movff	fsr2h,??_HighISR+1
  2022   0007B8                     
  2023                           ;interrupts.c: 52:     if(PIR4bits.RC4IF){
  2024   0007B8  010E               	movlb	14	; () banked
  2025   0007BA  A737               	btfss	55,3,b	;volatile
  2026   0007BC  EFE2  F003         	goto	i2u86_41
  2027   0007C0  EFE4  F003         	goto	i2u86_40
  2028   0007C4                     i2u86_41:
  2029   0007C4  EFE9  F003         	goto	i2l1898
  2030   0007C8                     i2u86_40:
  2031   0007C8                     
  2032                           ; BSR set to: 14
  2033                           ;interrupts.c: 53:         unsigned char a = RC4REG;
  2034   0007C8  CEE3 F005          	movff	3811,HighISR@a	;volatile
  2035   0007CC                     
  2036                           ; BSR set to: 14
  2037                           ;interrupts.c: 54:         putCharToRxBuf(a);
  2038   0007CC  5005               	movf	HighISR@a^0,w,c
  2039   0007CE  EC6B  F004         	call	_putCharToRxBuf
  2040   0007D2                     i2l1898:
  2041                           
  2042                           ;interrupts.c: 58:     if(!isDataInTxBuf()){
  2043   0007D2  ECA4  F004         	call	_isDataInTxBuf	;wreg free
  2044   0007D6  0900               	iorlw	0
  2045   0007D8  A4D8               	btfss	status,2,c
  2046   0007DA  EFF1  F003         	goto	i2u87_41
  2047   0007DE  EFF3  F003         	goto	i2u87_40
  2048   0007E2                     i2u87_41:
  2049   0007E2  EFF5  F003         	goto	i2l301
  2050   0007E6                     i2u87_40:
  2051   0007E6                     
  2052                           ;interrupts.c: 59:         PIE4bits.TX4IE=0;
  2053   0007E6  010E               	movlb	14	; () banked
  2054   0007E8  952D               	bcf	45,2,b	;volatile
  2055   0007EA                     i2l301:
  2056                           
  2057                           ;interrupts.c: 61:     if(PIR4bits.TX4IF){
  2058   0007EA  010E               	movlb	14	; () banked
  2059   0007EC  A537               	btfss	55,2,b	;volatile
  2060   0007EE  EFFB  F003         	goto	i2u88_41
  2061   0007F2  EFFD  F003         	goto	i2u88_40
  2062   0007F6                     i2u88_41:
  2063   0007F6  EF01  F004         	goto	i2l303
  2064   0007FA                     i2u88_40:
  2065   0007FA                     
  2066                           ; BSR set to: 14
  2067                           ;interrupts.c: 62:         TX4REG = getCharFromTxBuf();
  2068   0007FA  EC55  F004         	call	_getCharFromTxBuf	;wreg free
  2069   0007FE  010E               	movlb	14	; () banked
  2070   000800  6FE4               	movwf	228,b	;volatile
  2071   000802                     i2l303:
  2072                           
  2073                           ; BSR set to: 14
  2074   000802  C004  FFDA         	movff	??_HighISR+1,fsr2h
  2075   000806  C003  FFD9         	movff	??_HighISR,fsr2l
  2076   00080A  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2077   00080C  0011               	retfie		f
  2078   00080E                     __end_of_HighISR:
  2079                           	callstack 0
  2080                           
  2081 ;; *************** function _putCharToRxBuf *****************
  2082 ;; Defined at:
  2083 ;;		line 54 in file "serial.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;  byte            1    wreg     unsigned char 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  byte            1    0[COMRAM] unsigned char 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2098 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2100 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2101 ;;Total ram usage:        1 bytes
  2102 ;; Hardware stack levels used: 1
  2103 ;; This function calls:
  2104 ;;		Nothing
  2105 ;; This function is called by:
  2106 ;;		_HighISR
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           	psect	text12
  2111   0008D6                     __ptext12:
  2112                           	callstack 0
  2113   0008D6                     _putCharToRxBuf:
  2114                           	callstack 23
  2115                           
  2116                           ; BSR set to: 14
  2117                           ;incstack = 0
  2118                           ;putCharToRxBuf@byte stored from wreg
  2119   0008D6  6E01               	movwf	putCharToRxBuf@byte^0,c
  2120   0008D8                     
  2121                           ;serial.c: 55:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  2122   0008D8  0E13               	movlw	19
  2123   0008DA  6448               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  2124   0008DC  EF72  F004         	goto	i2u26_41
  2125   0008E0  EF74  F004         	goto	i2u26_40
  2126   0008E4                     i2u26_41:
  2127   0008E4  EF76  F004         	goto	i2l1334
  2128   0008E8                     i2u26_40:
  2129   0008E8  0E00               	movlw	0
  2130   0008EA  6E48               	movwf	_RxBufWriteCnt^0,c	;volatile
  2131   0008EC                     i2l1334:
  2132                           
  2133                           ;serial.c: 56:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  2134   0008EC  0E30               	movlw	low _EUSART4RXbuf
  2135   0008EE  2448               	addwf	_RxBufWriteCnt^0,w,c	;volatile
  2136   0008F0  6ED9               	movwf	fsr2l,c
  2137   0008F2  6ADA               	clrf	fsr2h,c
  2138   0008F4  0E00               	movlw	high _EUSART4RXbuf
  2139   0008F6  22DA               	addwfc	fsr2h,f,c
  2140   0008F8  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  2141   0008FC  2A48               	incf	_RxBufWriteCnt^0,f,c	;volatile
  2142   0008FE  0012               	return		;funcret
  2143   000900                     __end_of_putCharToRxBuf:
  2144                           	callstack 0
  2145                           
  2146 ;; *************** function _isDataInTxBuf *****************
  2147 ;; Defined at:
  2148 ;;		line 82 in file "serial.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;		None
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;		None
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  1    wreg      unsigned char 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2166 ;;Total ram usage:        0 bytes
  2167 ;; Hardware stack levels used: 1
  2168 ;; This function calls:
  2169 ;;		Nothing
  2170 ;; This function is called by:
  2171 ;;		_HighISR
  2172 ;;		_sendTxBuf
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text13
  2177   000948                     __ptext13:
  2178                           	callstack 0
  2179   000948                     _isDataInTxBuf:
  2180                           	callstack 23
  2181   000948                     
  2182                           ;serial.c: 83:     return (TxBufWriteCnt!=TxBufReadCnt);
  2183   000948  5045               	movf	_TxBufReadCnt^0,w,c	;volatile
  2184   00094A  1846               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  2185   00094C  A4D8               	btfss	status,2,c
  2186   00094E  EFAB  F004         	goto	i2u27_41
  2187   000952  EFAE  F004         	goto	i2u27_40
  2188   000956                     i2u27_41:
  2189   000956  0E01               	movlw	1
  2190   000958  EFAF  F004         	goto	i2u28_40
  2191   00095C                     i2u27_40:
  2192   00095C  0E00               	movlw	0
  2193   00095E                     i2u28_40:
  2194   00095E  0012               	return		;funcret
  2195   000960                     __end_of_isDataInTxBuf:
  2196                           	callstack 0
  2197                           
  2198 ;; *************** function _getCharFromTxBuf *****************
  2199 ;; Defined at:
  2200 ;;		line 68 in file "serial.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;		None
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;		None
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      unsigned char 
  2207 ;; Registers used:
  2208 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2216 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2217 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2218 ;;Total ram usage:        2 bytes
  2219 ;; Hardware stack levels used: 1
  2220 ;; This function calls:
  2221 ;;		Nothing
  2222 ;; This function is called by:
  2223 ;;		_HighISR
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text14
  2228   0008AA                     __ptext14:
  2229                           	callstack 0
  2230   0008AA                     _getCharFromTxBuf:
  2231                           	callstack 23
  2232   0008AA                     
  2233                           ;serial.c: 69:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  2234   0008AA  0E3B               	movlw	59
  2235   0008AC  6445               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  2236   0008AE  EF5B  F004         	goto	i2u76_41
  2237   0008B2  EF5D  F004         	goto	i2u76_40
  2238   0008B6                     i2u76_41:
  2239   0008B6  EF5F  F004         	goto	i2l1810
  2240   0008BA                     i2u76_40:
  2241   0008BA  0E00               	movlw	0
  2242   0008BC  6E45               	movwf	_TxBufReadCnt^0,c	;volatile
  2243   0008BE                     i2l1810:
  2244                           
  2245                           ;serial.c: 70:     return EUSART4TXbuf[TxBufReadCnt++];
  2246   0008BE  2A45               	incf	_TxBufReadCnt^0,f,c	;volatile
  2247   0008C0  0445               	decf	_TxBufReadCnt^0,w,c	;volatile
  2248   0008C2  6E01               	movwf	??_getCharFromTxBuf^0,c
  2249   0008C4  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  2250   0008C6  0E60               	movlw	low _EUSART4TXbuf
  2251   0008C8  2401               	addwf	??_getCharFromTxBuf^0,w,c
  2252   0008CA  6ED9               	movwf	fsr2l,c
  2253   0008CC  0E00               	movlw	high _EUSART4TXbuf
  2254   0008CE  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  2255   0008D0  6EDA               	movwf	fsr2h,c
  2256   0008D2  50DF               	movf	indf2,w,c
  2257   0008D4  0012               	return		;funcret
  2258   0008D6                     __end_of_getCharFromTxBuf:
  2259                           	callstack 0
  2260   000000                     
  2261                           	psect	rparam
  2262   000000                     
  2263                           	psect	temp
  2264   000049                     btemp:
  2265                           	callstack 0
  2266   000049                     	ds	1
  2267   000000                     int$flags	set	btemp
  2268   000000                     wtemp8	set	btemp+1
  2269   000000                     ttemp5	set	btemp+1
  2270   000000                     ttemp6	set	btemp+4
  2271   000000                     ttemp7	set	btemp+8
  2272                           
  2273                           	psect	idloc
  2274                           
  2275                           ;Config register IDLOC0 @ 0x200000
  2276                           ;	unspecified, using default values
  2277   200000                     	org	2097152
  2278   200000  0FFF               	dw	4095
  2279                           
  2280                           ;Config register IDLOC1 @ 0x200002
  2281                           ;	unspecified, using default values
  2282   200002                     	org	2097154
  2283   200002  0FFF               	dw	4095
  2284                           
  2285                           ;Config register IDLOC2 @ 0x200004
  2286                           ;	unspecified, using default values
  2287   200004                     	org	2097156
  2288   200004  0FFF               	dw	4095
  2289                           
  2290                           ;Config register IDLOC3 @ 0x200006
  2291                           ;	unspecified, using default values
  2292   200006                     	org	2097158
  2293   200006  0FFF               	dw	4095
  2294                           
  2295                           ;Config register IDLOC4 @ 0x200008
  2296                           ;	unspecified, using default values
  2297   200008                     	org	2097160
  2298   200008  0FFF               	dw	4095
  2299                           
  2300                           ;Config register IDLOC5 @ 0x20000A
  2301                           ;	unspecified, using default values
  2302   20000A                     	org	2097162
  2303   20000A  0FFF               	dw	4095
  2304                           
  2305                           ;Config register IDLOC6 @ 0x20000C
  2306                           ;	unspecified, using default values
  2307   20000C                     	org	2097164
  2308   20000C  0FFF               	dw	4095
  2309                           
  2310                           ;Config register IDLOC7 @ 0x20000E
  2311                           ;	unspecified, using default values
  2312   20000E                     	org	2097166
  2313   20000E  0FFF               	dw	4095
  2314                           
  2315                           	psect	config
  2316                           
  2317                           ;Config register CONFIG1L @ 0x300000
  2318                           ;	External Oscillator mode Selection bits
  2319                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2320                           ;	Power-up default value for COSC bits
  2321                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2322   300000                     	org	3145728
  2323   300000  AA                 	db	170
  2324                           
  2325                           ;Config register CONFIG1H @ 0x300001
  2326                           ;	unspecified, using default values
  2327                           ;	Clock Out Enable bit
  2328                           ;	CLKOUTEN = 0x1, unprogrammed default
  2329                           ;	Clock Switch Enable bit
  2330                           ;	CSWEN = 0x1, unprogrammed default
  2331                           ;	Fail-Safe Clock Monitor Enable bit
  2332                           ;	FCMEN = 0x1, unprogrammed default
  2333   300001                     	org	3145729
  2334   300001  FF                 	db	255
  2335                           
  2336                           ;Config register CONFIG2L @ 0x300002
  2337                           ;	unspecified, using default values
  2338                           ;	Master Clear Enable bit
  2339                           ;	MCLRE = 0x1, unprogrammed default
  2340                           ;	Power-up Timer Enable bit
  2341                           ;	PWRTE = 0x1, unprogrammed default
  2342                           ;	Low-power BOR enable bit
  2343                           ;	LPBOREN = 0x1, unprogrammed default
  2344                           ;	Brown-out Reset Enable bits
  2345                           ;	BOREN = 0x3, unprogrammed default
  2346   300002                     	org	3145730
  2347   300002  FF                 	db	255
  2348                           
  2349                           ;Config register CONFIG2H @ 0x300003
  2350                           ;	unspecified, using default values
  2351                           ;	Brown Out Reset Voltage selection bits
  2352                           ;	BORV = 0x3, unprogrammed default
  2353                           ;	ZCD Disable bit
  2354                           ;	ZCD = 0x1, unprogrammed default
  2355                           ;	PPSLOCK bit One-Way Set Enable bit
  2356                           ;	PPS1WAY = 0x1, unprogrammed default
  2357                           ;	Stack Full/Underflow Reset Enable bit
  2358                           ;	STVREN = 0x1, unprogrammed default
  2359                           ;	Debugger Enable bit
  2360                           ;	DEBUG = 0x1, unprogrammed default
  2361                           ;	Extended Instruction Set Enable bit
  2362                           ;	XINST = 0x1, unprogrammed default
  2363   300003                     	org	3145731
  2364   300003  FF                 	db	255
  2365                           
  2366                           ;Config register CONFIG3L @ 0x300004
  2367                           ;	WDT Period Select bits
  2368                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2369                           ;	WDT operating mode
  2370                           ;	WDTE = OFF, WDT Disabled
  2371   300004                     	org	3145732
  2372   300004  9F                 	db	159
  2373                           
  2374                           ;Config register CONFIG3H @ 0x300005
  2375                           ;	unspecified, using default values
  2376                           ;	WDT Window Select bits
  2377                           ;	WDTCWS = 0x7, unprogrammed default
  2378                           ;	WDT input clock selector
  2379                           ;	WDTCCS = 0x7, unprogrammed default
  2380   300005                     	org	3145733
  2381   300005  FF                 	db	255
  2382                           
  2383                           ;Config register CONFIG4L @ 0x300006
  2384                           ;	unspecified, using default values
  2385                           ;	Write Protection Block 0
  2386                           ;	WRT0 = 0x1, unprogrammed default
  2387                           ;	Write Protection Block 1
  2388                           ;	WRT1 = 0x1, unprogrammed default
  2389                           ;	Write Protection Block 2
  2390                           ;	WRT2 = 0x1, unprogrammed default
  2391                           ;	Write Protection Block 3
  2392                           ;	WRT3 = 0x1, unprogrammed default
  2393                           ;	Write Protection Block 3
  2394                           ;	WRT4 = 0x1, unprogrammed default
  2395                           ;	Write Protection Block 3
  2396                           ;	WRT5 = 0x1, unprogrammed default
  2397                           ;	Write Protection Block 3
  2398                           ;	WRT6 = 0x1, unprogrammed default
  2399                           ;	Write Protection Block 3
  2400                           ;	WRT7 = 0x1, unprogrammed default
  2401   300006                     	org	3145734
  2402   300006  FF                 	db	255
  2403                           
  2404                           ;Config register CONFIG4H @ 0x300007
  2405                           ;	unspecified, using default values
  2406                           ;	Configuration Register Write Protection bit
  2407                           ;	WRTC = 0x1, unprogrammed default
  2408                           ;	Boot Block Write Protection bit
  2409                           ;	WRTB = 0x1, unprogrammed default
  2410                           ;	Data EEPROM Write Protection bit
  2411                           ;	WRTD = 0x1, unprogrammed default
  2412                           ;	Scanner Enable bit
  2413                           ;	SCANE = 0x1, unprogrammed default
  2414                           ;	Low Voltage Programming Enable bit
  2415                           ;	LVP = 0x1, unprogrammed default
  2416   300007                     	org	3145735
  2417   300007  FF                 	db	255
  2418                           
  2419                           ;Config register CONFIG5L @ 0x300008
  2420                           ;	unspecified, using default values
  2421                           ;	UserNVM Program Memory Code Protection bit
  2422                           ;	CP = 0x1, unprogrammed default
  2423                           ;	DataNVM Memory Code Protection bit
  2424                           ;	CPD = 0x1, unprogrammed default
  2425   300008                     	org	3145736
  2426   300008  FF                 	db	255
  2427                           
  2428                           ;Config register CONFIG5H @ 0x300009
  2429                           ;	unspecified, using default values
  2430   300009                     	org	3145737
  2431   300009  FF                 	db	255
  2432                           
  2433                           ;Config register CONFIG6L @ 0x30000A
  2434                           ;	unspecified, using default values
  2435                           ;	Table Read Protection Block 0
  2436                           ;	EBTR0 = 0x1, unprogrammed default
  2437                           ;	Table Read Protection Block 1
  2438                           ;	EBTR1 = 0x1, unprogrammed default
  2439                           ;	Table Read Protection Block 2
  2440                           ;	EBTR2 = 0x1, unprogrammed default
  2441                           ;	Table Read Protection Block 3
  2442                           ;	EBTR3 = 0x1, unprogrammed default
  2443                           ;	Table Read Protection Block 4
  2444                           ;	EBTR4 = 0x1, unprogrammed default
  2445                           ;	Table Read Protection Block 5
  2446                           ;	EBTR5 = 0x1, unprogrammed default
  2447                           ;	Table Read Protection Block 6
  2448                           ;	EBTR6 = 0x1, unprogrammed default
  2449                           ;	Table Read Protection Block 7
  2450                           ;	EBTR7 = 0x1, unprogrammed default
  2451   30000A                     	org	3145738
  2452   30000A  FF                 	db	255
  2453                           
  2454                           ;Config register CONFIG6H @ 0x30000B
  2455                           ;	unspecified, using default values
  2456                           ;	Boot Block Table Read Protection bit
  2457                           ;	EBTRB = 0x1, unprogrammed default
  2458   30000B                     	org	3145739
  2459   30000B  FF                 	db	255
  2460                           tosu	equ	0xFFF
  2461                           tosh	equ	0xFFE
  2462                           tosl	equ	0xFFD
  2463                           stkptr	equ	0xFFC
  2464                           pclatu	equ	0xFFB
  2465                           pclath	equ	0xFFA
  2466                           pcl	equ	0xFF9
  2467                           tblptru	equ	0xFF8
  2468                           tblptrh	equ	0xFF7
  2469                           tblptrl	equ	0xFF6
  2470                           tablat	equ	0xFF5
  2471                           prodh	equ	0xFF4
  2472                           prodl	equ	0xFF3
  2473                           indf0	equ	0xFEF
  2474                           postinc0	equ	0xFEE
  2475                           postdec0	equ	0xFED
  2476                           preinc0	equ	0xFEC
  2477                           plusw0	equ	0xFEB
  2478                           fsr0h	equ	0xFEA
  2479                           fsr0l	equ	0xFE9
  2480                           wreg	equ	0xFE8
  2481                           indf1	equ	0xFE7
  2482                           postinc1	equ	0xFE6
  2483                           postdec1	equ	0xFE5
  2484                           preinc1	equ	0xFE4
  2485                           plusw1	equ	0xFE3
  2486                           fsr1h	equ	0xFE2
  2487                           fsr1l	equ	0xFE1
  2488                           bsr	equ	0xFE0
  2489                           indf2	equ	0xFDF
  2490                           postinc2	equ	0xFDE
  2491                           postdec2	equ	0xFDD
  2492                           preinc2	equ	0xFDC
  2493                           plusw2	equ	0xFDB
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         85
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      72
    BANK0           160     18      78
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    yellowInstructions@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    yellowInstructions@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedBackwards@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    fullSpeedBackwards@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    fullSpeedBackwards@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedBackwards@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    fullSpeedBackwards@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    fullSpeedBackwards@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    S1069DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    S1069DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 


Critical Paths under _main in COMRAM

    _main->_yellowInstructions
    _yellowInstructions->_turnRight90
    _turnRight90->_turnRight
    _turnRight->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedBackwards->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   13565
                                             45 COMRAM     2     2      0
                                              0 BANK0     18    18      0
                    _initDCmotorsPWM
                 _yellowInstructions
 ---------------------------------------------------------------------------------
 (1) _yellowInstructions                                   6     2      4   12682
                                             39 COMRAM     6     2      4
                 _fullSpeedBackwards
                        _turnRight90
 ---------------------------------------------------------------------------------
 (2) _turnRight90                                          5     1      4    8925
                                             34 COMRAM     5     1      4
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            6     2      4    3633
                                             28 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _stop                                                 5     1      4    4737
                                             28 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedBackwards                                   6     2      4    3453
                                             28 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                          6     4      2    2721
                                             22 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     472
                                              9 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     481
                                             15 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2     121
                                              9 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                               4     4      0       0
                                              5 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighISR                                              3     3      0      38
                                              2 COMRAM     3     3      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
                     _putCharToRxBuf
 ---------------------------------------------------------------------------------
 (8) _putCharToRxBuf                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initDCmotorsPWM
   _yellowInstructions
     _fullSpeedBackwards
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnRight90
       _stop
         _setMotorPWM
       _turnRight
         _setMotorPWM

 _LowISR (ROOT)

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf
   _putCharToRxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      63        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      4E       5       48.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      48       1       76.6%
BITBIGSFRhllllh     52      0       0      42        0.0%
BITBIGSFRhlllll     37      0       0      44        0.0%
BITBIGSFRllh        2D      0       0      47        0.0%
BITBIGSFRlllhll     2A      0       0      54        0.0%
BITBIGSFRlllll      26      0       0      61        0.0%
BITBIGSFRlllhhh     1E      0       0      48        0.0%
BITBIGSFRhhhlll     1E      0       0      38        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      49        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhll      9      0       0      58        0.0%
BITBIGSFRhlllll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      60        0.0%
BITBIGSFRlllhll      6      0       0      53        0.0%
BITBIGSFRlllhll      5      0       0      56        0.0%
BITBIGSFRlllhlh      5      0       0      52        0.0%
BITBIGSFRlllhll      3      0       0      55        0.0%
BITBIGSFRlllhll      3      0       0      57        0.0%
BITBIGSFRlllhhl      3      0       0      51        0.0%
BITBIGSFRhlllll      2      0       0      43        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      50        0.0%
BITBIGSFRhlllhh      1      0       0      40        0.0%
BITBIGSFRhlllhl      1      0       0      41        0.0%
BITBIGSFRhlh         1      0       0      39        0.0%
BITBIGSFRlllhll      1      0       0      59        0.0%
BITBIGSFRlh          1      0       0      46        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      96      62        0.0%
DATA                 0      0      96       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Mar 05 18:28:45 2023

                        bsr 000FE0         ___wmul@multiplicand 000C                         l211 0866  
                       l161 0478                         l241 08A8                         l154 06B4  
                       l173 030C                         l431 0924                         l183 054E  
                       l193 0624                         l922 07A6                         l929 07AE  
                       u900 0756                         u901 0752                         u910 0774  
                       u911 0770                         u920 0790                         u921 078C  
                       u930 032A                         u931 0326                         u940 03F4  
                       u941 03F0                         u950 009A                         u951 0096  
                       u960 00B6                         u961 00B2                         u970 00EE  
                       u971 00EA                         u980 0112                         u981 010E  
                       u990 0174                         u991 0170                         wreg 000FE8  
                      l2000 0128                        l2010 0174                        l2002 0132  
                      l2020 01F8                        l2012 0190                        l2004 013E  
                      l2100 0856                        l2110 0684                        l2102 0626  
                      l2022 0202                        l2014 01C8                        l2030 0232  
                      l2006 014A                        l2120 06A6                        l2112 068E  
                      l2104 0636                        l2040 02C6                        l2032 024E  
                      l2024 020C                        l2016 01D4                        l2008 0158  
                      l2122 06A8                        l2114 0690                        l2106 065C  
                      l2050 02FE                        l2042 02D2                        l2034 026A  
                      l2026 0218                        l2018 01EC                        l2210 06B6  
                      l2124 06B2                        l2116 069A                        l2108 0660  
                      l2044 02DC                        l2036 02A2                        l2028 0224  
                      l2060 050A                        l2052 047A                        l2220 06D8  
                      l2212 06C2                        l2118 069C                        l2070 0550  
                      l2046 02E6                        l2038 02AE                        l2062 0514  
                      l2054 04D6                        l2134 0868                        l2230 06F2  
                      l2222 06E0                        l2214 06C8                        l2080 05EA  
                      l2072 05AC                        l2048 02F2                        l2064 051E  
                      l2056 04E2                        l2136 087C                        l2232 06FA  
                      l2224 06E6                        l2216 06CC                        l2082 05F4  
                      l2074 05B8                        l2066 052A                        l2058 04FE  
                      l2090 0816                        l2138 0894                        l2234 0702  
                      l2226 06EA                        l2218 06D0                        l2084 0600  
                      l2076 05D4                        l2068 0536                        l2092 082A  
                      l2236 0708                        l2228 06EE                        l2086 060C  
                      l2078 05E0                        l2094 082C                        l2238 071C  
                      l2096 0840                        l2088 080E                        l2098 0854  
                      l1950 0744                        l1942 0900                        l1960 077A  
                      l1952 0756                        l1944 091C                        l1962 0790  
                      l1954 075E                        l1970 030E                        l1964 0798  
                      l1956 0766                        l1948 073C                        l1980 03D8  
                      l1972 032A                        l1966 079A                        l1958 0774  
                      l1982 03F4                        l1974 037E                        l1990 00B6  
                      l1968 07A0                        l1984 0438                        l1976 0392  
                      l1992 00EE                        l1978 0396                        l1994 00FA  
                      l1986 007E                        l1996 0112                        l1988 009A  
                      l1998 011E                        u1000 0190                        u1001 018C  
                      u1010 01C8                        u1011 01C4                        u1100 05D4  
                      u1020 01EC                        u1101 05D0                        u1021 01E8  
                      u1030 024E                        u1110 083C                        u1031 024A  
                      u1111 0838                        u1040 026A                        u1120 0866  
                      u1041 0266                        u1121 0862                        u1050 02A2  
                      u1051 029E                        u1060 02C6                        u1061 02C2  
                      u1070 04D6                        u1071 04D2                        u1080 04FE  
                      u1081 04FA                        u1217 0726                        u1090 05AC  
                      u1091 05A8                        u1227 0886                        u1237 0540  
                      u1247 0150                _BAUD4CONbits 000EE9                        u1257 022A  
                      u1267 0304                        u1277 0616                        _T2PR 000FBC  
                      _main 06B6                        fsr2h 000FDA                        indf2 000FDF  
                      fsr2l 000FD9                        btemp 0049                        _stop 007E  
                      prodh 000FF4                        prodl 000FF3                        start 007A  
           __end_of_HighISR 080E                ___param_bank 000000                 _turnRight90 080E  
                     ?_main 0001                       ?_stop 001D             __end_of___lwdiv 07B0  
                     i2l301 07EA                       i2l303 0802                       i1l295 006A  
                     i2l380 095E                       i2l373 08D4                       i2l366 08FE  
                     _TMR0H 000FD4                       _TMR0L 000FD3  __end_of_yellowInstructions 08AA  
                     plusw2 000FDB                       ttemp5 004A                       ttemp6 004D  
                     ttemp7 0051                       status 000FD8                       wtemp8 004A  
        putCharToRxBuf@byte 0001        fullSpeedBackwards@mL 001D        fullSpeedBackwards@mR 001F  
           __initialization 0926                __end_of_main 073C                __end_of_stop 030E  
                    ??_main 002E                      ??_stop 0021               __activetblptr 000000  
              ?_setMotorPWM 0017                      _CCPR1H 000FAA                      _CCPR2H 000FA6  
                    _CCPR3H 000F25                      _CCPR4H 000F21                      _RC0PPS 000E62  
                    _RC4REG 000EE3                      i1l1500 0062                      i1l1502 0066  
                    _RE2PPS 000E74                      _RD5PPS 000E6F                      _RC7PPS 000E69  
                    i1l1492 0026                      i1l1494 0036                      i1l1496 005A  
                    i1l1498 005E                      _RE4PPS 000E76                      _RD6PPS 000E70  
                    i2l1330 08D8                      i2l1332 08E8                      i2l1334 08EC  
                    i2l1336 08FC                      i2l1338 0948                      i2l1810 08BE  
                    i2l1900 07E6                      i2l1806 08AA                      i2l1902 07FA  
                    i2l1808 08BA                      i2l1892 07B8                      i2l1894 07C8  
                    i2l1896 07CC                      i2l1898 07D2                      _RG6PPS 000E88  
                 ??_HighISR 0003                      _RX4PPS 000E15                      _TX4REG 000EE4  
                    _LowISR 0018                _CCPTMRS0bits 000FAD            _getCharFromTxBuf 08AA  
                    ___wmul 0900                   ??___lwdiv 0014                      clear_0 092C  
                    clear_1 0938                      isa$std 000001                      stop@mL 001D  
                    stop@mR 001F           ??_initDCmotorsPWM 000C       __end_of_isDataInTxBuf 0960  
                __accesstop 0060     __end_of__initialization 093E               ___rparam_used 000001  
            __pcstackCOMRAM 0001                  __pbssBANK0 0060                     ?_LowISR 0001  
              _T2CLKCONbits 000FBF                     ?___wmul 000A                ?_turnRight90 0023  
                   _SP4BRGH 000EE6                     _SP4BRGL 000EE5                     i1u42_20 0036  
                   i1u42_21 0032                     i1u43_20 0048                     i1u43_21 0040  
                   i1u44_28 004A                     i2u26_40 08E8                     i2u26_41 08E4  
                   i2u27_40 095C                     i2u27_41 0956                     i2u28_40 095E  
                   i2u76_40 08BA                     i2u76_41 08B6                     i2u86_40 07C8  
                   i2u86_41 07C4                     i2u87_40 07E6                     i2u87_41 07E2  
                   i2u88_40 07FA                     i2u88_41 07F6                     _SSP2ADD 000ED6  
                   _SSP2BUF 000ED5                     _HighISR 0008          _yellowInstructions 0868  
                   __Hparam 0000                     __Lparam 0000  __end_of_fullSpeedBackwards 0626  
       ?_yellowInstructions 0028                     ___lwdiv 073C                     __pcinit 0926  
                   __ramtop 0E00                     __ptext0 06B6                     __ptext1 0868  
                   __ptext2 080E                     __ptext3 047A                     __ptext4 007E  
                   __ptext5 0550                     __ptext6 030E                     __ptext7 0900  
                   __ptext8 073C                     __ptext9 0626                   _T2CONbits 000FBD  
                 _T2HLTbits 000FBE               _RxBufWriteCnt 0048        ??_yellowInstructions 002C  
  __end_of_getCharFromTxBuf 08D6                     _tmr_ovf 0044              __pintcode_body 07B0  
      end_of_initialization 093E                     int_func 07B0                turnRight90@a 0027  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
           _initDCmotorsPWM 0626          setMotorPWM@negDuty 001C           __end_of_turnRight 0550  
                 _TRISAbits 000F81          setMotorPWM@posDuty 001B                   _TRISCbits 000F83  
                 _TRISDbits 000F84                   _TRISEbits 000F85                   _TRISFbits 000F86  
                 _TRISGbits 000F87                 _CCP1CONbits 000FAB                _EUSART4RXbuf 0030  
              _EUSART4TXbuf 0060                 _CCP2CONbits 000FA7                 _CCP3CONbits 000F26  
               _CCP4CONbits 000F22                  main@motorL 009C                  main@motorR 00A5  
            __end_of_LowISR 007A              __end_of___wmul 0926         start_initialization 0926  
             _TxBufWriteCnt 0046                    ??_LowISR 0006     __end_of_initDCmotorsPWM 06B6  
                  ??___wmul 000E              _putCharToRxBuf 08D6                 __pbssCOMRAM 0030  
             __pcstackBANK0 009C                    ?_HighISR 0001            ___lwdiv@dividend 0010  
    __end_of_putCharToRxBuf 0900                   __pintcode 0008                    ?___lwdiv 0010  
      yellowInstructions@mL 0028        yellowInstructions@mR 002A                 __pintcodelo 0018  
        _fullSpeedBackwards 0550                _RxBufReadCnt 0047               ??_setMotorPWM 0019  
          ___lwdiv@quotient 0015    initDCmotorsPWM@PWMperiod 000A           ?_getCharFromTxBuf 0001  
       ?_fullSpeedBackwards 001D          ??_getCharFromTxBuf 0001              ___wmul@product 000E  
                  _LATAbits 000F79                    _LATCbits 000F7B               _isDataInTxBuf 0948  
                  _LATEbits 000F7D                    _LATFbits 000F7E                    _LATGbits 000F7F  
                  _LATHbits 000F80                    _IPR0bits 000E1F                    _PIE0bits 000E29  
                  _PIE4bits 000E2D                 turnRight@mL 001D                 turnRight@mR 001F  
                  _PIR0bits 000E33                    HighISR@a 0005                    _PIR4bits 000E37  
           ?_putCharToRxBuf 0001            ?_initDCmotorsPWM 000A                    _SSP2CON2 000EDA  
                  _SSP2STAT 000ED8        ??_fullSpeedBackwards 0021           ___wmul@multiplier 000A  
              setMotorPWM@m 0017                _TxBufReadCnt 0045                   _turnRight 047A  
            ?_isDataInTxBuf 0001         __end_of_setMotorPWM 047A                    __Hrparam 0000  
                  __Lrparam 0000                  _ANSELDbits 000EA7                  _T0CON0bits 000FD5  
                _T0CON1bits 000FD6             ___lwdiv@divisor 0012             ___lwdiv@counter 0014  
                ?_turnRight 001D                    __ptext12 08D6                    __ptext13 0948  
                  __ptext14 08AA                _SSP2CON1bits 000ED9                _SSP2CON2bits 000EDA  
                  isa$xinst 000000                  _RC4STAbits 000EE7                    int$flags 0049  
             ??_turnRight90 0027                  _INTCONbits 000FF2                 _setMotorPWM 030E  
           ??_isDataInTxBuf 0001                    intlevel1 0000                    intlevel2 0000  
             turnRight90@mL 0023               turnRight90@mR 0025                  _SSP2DATPPS 000E1D  
                _SSP2CLKPPS 000E1C         __end_of_turnRight90 0868                 ??_turnRight 0021  
                _TX4STAbits 000EE8            ??_putCharToRxBuf 0001  
